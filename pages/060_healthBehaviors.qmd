# Health Behaviors

```{r}
#| label: gb
#| include: false
# include does not show output or code #| is a special syntax for Quarto 

#When testing and not rendering the report, the if statement returns true but when rendering as the report, the else executes
if (file.exists("pages/Global/gb.R")) {
  source("pages/Global/gb.R")
  source("pages/Data/data.R")
} else {
  source("./Global/gb.R")
  source("./Data/data.R")
}
```

Behavioral factors play a crucial role in determining the overall health and well-being of a community. These factors include habits and behaviors that can either positively or negatively impact health outcomes. In this section, we will explore several key behavioral factors that significantly affect our population:

Binge Drinking Among Adults: Excessive alcohol consumption can lead to a range of health issues, including liver disease, cardiovascular problems, and increased risk of accidents and injuries. Understanding the prevalence of binge drinking helps us address its impact on public health.

Percentage of Mothers Who Smoke: Smoking during pregnancy poses serious risks to both the mother and the unborn child, including low birth weight, preterm birth, and developmental issues. Monitoring smoking rates among mothers is essential for promoting healthier pregnancies and better outcomes for infants.

Current Cigarette Smoking Among Adults: Smoking remains a leading cause of preventable diseases and deaths. By examining current smoking rates, we can identify trends and target interventions to reduce smoking-related health problems.

STI/HIV: The prevalence of sexually transmitted infections (STIs) and HIV is a critical public health concern. Effective prevention, testing, and treatment strategies are necessary to control the spread of these infections and improve the health of affected individuals.

By analyzing these behavioral factors, we can gain valuable insights into the health challenges faced by our community and develop targeted strategies to promote healthier behaviors and improve overall health outcomes.

## Breastfeeding

The Special Supplemental Nutrition Program for Women, Infants & Children (WIC) is a nutrition and breastfeeding program that helps eligible pregnant women, new mothers, babies and young children. WIC provides nutrition education and counseling, nutritious foods, and referrals to health and other social services. Polk-Norman-Mahnomen CHS participates in the Minnesota WIC Peer Breastfeeding Support Program. Peer counselors improve health by increasing breastfeeding initiation, exclusivity, and duration.

::: {#fig-preventionRoutineCheckup}
```{r}
#| label: f_wicBreastFeedingRoutineCheckup
#| warning: false
#| include: false

# Data Wrangling so it can just be referenced in the PDF and HTML output instead of writing it twice

filtered_data <- f_wicBreastFeeding |> 
  dplyr::arrange(desc(year)) |>
  dplyr::filter(year >= max(year)-6, measure != "# infants") |>   # Select the 6 most recent year spans
  dplyr::mutate(#Passed into ggplot (PDF Plot) but displayed in plotly (HMTL Plot)
    toolTipTextHeader1 = "Year: "
    , toolTipTextValue1 = year
    , toolTipTextHeader2 = "\nDuration: "
    , toolTipTextValue2 = measure
    , toolTipTextHeader3 = "\nPercentage: "
    , toolTipTextValue3 = scales::label_percent(accuracy = 0.01)(measureValue)
  )

minYr <- unique(min(filtered_data$year))
maxYr <- unique(max(filtered_data$year))

# Filtering data here handles table variations better and is easier to maintain than filtering in the function.
# filtered_dataTbl <- filtered_data |> 
#   dplyr::filter(year == maxYr)  |>
#   dplyr::arrange(measureOrder) |>
#   dplyr::mutate(placeholder = ifelse(is.na(measureValue), "--", scales::label_percent(accuracy = 0.01)(measureValue))) |>   
#   dplyr::select(year, measure, placeholder) # Ensure fields are ordered as desired.

filtered_dataTbl <- filtered_data |> 
  dplyr::filter(year >= maxYr-1)  |>
  dplyr::arrange(-measureOrder, year) |>
  dplyr::group_by(-measureOrder, measure) |> 
  dplyr::summarize(
    Duration = measure
    , valueMinYr = measureValue[year == min(year)]
    , valueMaxYr = measureValue[year == max(year)]
    , pctDifference = valueMaxYr - valueMinYr
    , .groups = 'drop'
  ) |>
  dplyr::distinct() |> 
  dplyr::select(Duration, valueMinYr, valueMaxYr, pctDifference) |>  
  dplyr::mutate(
    valueMinYr = scales::label_percent(accuracy = .01)(valueMinYr)
    , valueMaxYr = scales::label_percent(accuracy = .01)(valueMaxYr)
    , pctDifference = scales::label_percent(accuracy = .01)(pctDifference)
    ) |>
  dplyr::rename("% Change" = pctDifference) |> 
  dplyr::rename_with(~ as.character(maxYr-1), valueMinYr)  |> 
  dplyr::rename_with(~ as.character(maxYr), valueMaxYr)

figCap_plotTitle <- "P−N−M Breastfeeding Initiation and Duration\nAmong Infants in the Minnesota WIC Program"
figSubcap <- "Data Source: @mdhWomenInfantChildren"
plotXCaption <- paste("Data Source:",mdhWomenInfantChildren) #Since the x axis is passed into plotly, I am defining the x axis for the plot with the data source so when/if people use the plot in their work the data source is referenced ggplot does a a caption argument but it does not pass into plotly. If the caption should be after the legend, then ggplot caption can be used for the pdf version and annotation can be used in plotly, I'll just have to pass an extra argument into the plotly function.

# Plot
scaleYContinuous = scales::label_percent()
#Table 
colList <- colnames(filtered_dataTbl) #colnames(filtered_dataTbl) # Using a list accommodates tables with different column lengths.

#Define the plot here so it is only wrote once
p <- gbFun_plotTrendPDF(
    filtered_data, "year", "measureValue", "measure", "measureOrder", "toolTipTextHeader1",
    "toolTipTextValue1", "toolTipTextHeader2", "toolTipTextValue2", "toolTipTextHeader3", 
    "toolTipTextValue3", figCap_plotTitle, plotXCaption, "", minYr, maxYr, 
    scaleYContinuous, gbVal_colorScheme, gbVal_shapeScheme, ifelse(knitr::is_html_output(), 10, 14)
    )

```

<div>

::: {.content-visible when-format="html"}
```{r}
#| fig-width: 8
#| fig-height: 6
#| warning: false
if (knitr::is_html_output()) {
  # Create the ggplot plot ggplot and then its wrapped within plotly function
  gbFun_plotHTML(p, figCap_plotTitle)
}
```

```{r}
#| tbl-width: 8
#| tbl-height: 4
#| warning: false
if (knitr::is_html_output()) {
  gbFun_tableHTML(filtered_dataTbl, colList, figCap_plotTitle)
}
```
:::

::: {.content-visible when-format="pdf" layout="[[1, 1], [1]]"}
```{r}
#| warning: false
#| fig-width: 9
#| fig-height: 5
if (!knitr::is_html_output()) {
# Plots have to be printed
print(p)
}

```

```{r}
#| warning: false
#| tbl-width: 2
#| tbl-height: 5
if (!knitr::is_html_output()) {
#Tables shouldn't be printed because the HTML table will display
gbFun_tablePDF(filtered_dataTbl, colList)
}
```
:::

`{r} figSubcap`

</div>

`{r} figCap_plotTitle`
:::

## Substance Use and Misuse

While most youth enjoy good health, some are at increased risk for behaviors that can lead to poor health outcomes. Notably, many adults with substance abuse disorders and addictions began their struggles during adolescence and young adulthood.

Mahnomen County stands out with the highest rates of Neonatal Abstinence Syndrome (NAS) at 52.3 per 1,000 live births and nonfatal drug overdoses at 9.8 per 1,000 residents. These rates are significantly higher than the state averages for Minnesota.

Comparing fatal drug overdose data across counties can be challenging due to its presentation as raw counts rather than rates. Instead of focusing solely on these counts, we should consider the profound impact each loss has on the community. Over approximately nine years, Minnesota lost 8,991 individuals to drug overdoses. Polk County experienced 34 fatalities, Norman County had 4, and Mahnomen County lost 43. These numbers remind us that behind every statistic is a life, underscoring the importance of our work and the positive changes we strive to bring to our communities.

Beyond drug overdoses, other significant public health concerns include binge drinking and smoking. These behaviors also contribute to premature death and years of potential life lost. By examining data on binge drinking and smoking, we can better understand their impact on our communities and develop effective strategies to mitigate these risks.

::: {#fig-mdhNAS}
```{r}
#| label: f_neonatalAbstinenceSyndrome2016_2022
#| warning: false
#| include: false

# Data Wrangling so it can just be referenced in the PDF and HTML output instead of writing it twice

filtered_data <- f_neonatalAbstinenceSyndrome2016_2022 |> 
  dplyr::arrange(desc(year)) |>
  dplyr::filter(year >= max(year)-6, fips != 99) |>   # Select the 6 most recent year spans
  dplyr::mutate(#Passed into ggplot (PDF Plot) but displayed in plotly (HMTL Plot)
    toolTipTextHeader1 = "Year: "
    , toolTipTextValue1 = year
    , toolTipTextHeader2 = "\nLocation: "
    , toolTipTextValue2 = location
    , toolTipTextHeader3 = "\nCount: "
    , toolTipTextValue3 = scales::label_comma()(valueCount)
  )

minYr <- unique(min(filtered_data$year))
maxYr <- unique(max(filtered_data$year))

# Filtering data here handles table variations better and is easier to maintain than filtering in the function.
filtered_dataTbl <- f_neonatalAbstinenceSyndrome2016_2022 |> 
  dplyr::filter(year == 1)  |>
  dplyr::arrange(fips) |>
  dplyr::mutate(placeholderCount = scales::label_comma()(valueCount)
                , placeholderRate = scales::label_comma(accuracy = 0.01)(rate2016_2022)) |>   
  dplyr::select(location, placeholderCount, placeholderRate) # Ensure fields are ordered as desired.

figCap_plotTitle <- "Neonatal Abstinence Syndrome (NAS)"
figSubcap <- "Data Source: @mdhNeonatalAbstinenceSyndrome"
plotXCaption <- paste("Data Source:",mdhNeonatalAbstinenceSyndrome) #Since the x axis is passed into plotly, I am defining the x axis for the plot with the data source so when/if people use the plot in their work the data source is referenced ggplot does a a caption argument but it does not pass into plotly. If the caption should be after the legend, then ggplot caption can be used for the pdf version and annotation can be used in plotly, I'll just have to pass an extra argument into the plotly function.

# Plot
scaleYContinuous = scales::label_comma()
#Table 
colList <- list("Location", "NAS Total 2016-2022", "NAS Rate 2016-2022") # Using a list accommodates tables with different column lengths.

#Define the plot here so it is only wrote once
p <- gbFun_plotTrendPDF(
    filtered_data, "year", "valueCount", "location", "fips", "toolTipTextHeader1",
    "toolTipTextValue1", "toolTipTextHeader2", "toolTipTextValue2", "toolTipTextHeader3", 
    "toolTipTextValue3", figCap_plotTitle, plotXCaption, "", minYr, maxYr, 
    scaleYContinuous, gbVal_colorScheme, gbVal_shapeScheme, ifelse(knitr::is_html_output(), 10, 14)
    )

```

<div>

::: {.content-visible when-format="html"}
```{r}
#| fig-width: 8
#| fig-height: 5
#| warning: false
if (knitr::is_html_output()) {
  # Create the ggplot plot ggplot and then its wrapped within plotly function
  gbFun_plotHTML(p, figCap_plotTitle)
}
```

```{r}
#| tbl-width: 8
#| tbl-height: 4
#| warning: false
if (knitr::is_html_output()) {
  gbFun_tableHTML(filtered_dataTbl, colList, figCap_plotTitle)
}
```
:::

::: {.content-visible when-format="pdf" layout="[[1, 1], [1]]"}
```{r}
#| warning: false
#| fig-width: 9
#| fig-height: 5
if (!knitr::is_html_output()) {
# Plots have to be printed
print(p)
}

```

```{r}
#| warning: false
#| tbl-width: 2
#| tbl-height: 5
if (!knitr::is_html_output()) {
#Tables shouldn't be printed because the HTML table will display
gbFun_tablePDF(filtered_dataTbl, colList)
}
```
:::

`{r} figSubcap`

</div>

`{r} figCap_plotTitle`
:::

::: {#fig-mdhNonfatalDrug}
```{r}
#| label: f_mdhNonFatalDrugOverdose
#| warning: false
#| include: false

# Data Wrangling so it can just be referenced in the PDF and HTML output instead of writing it twice

filtered_data <- f_mdhNonFatalDrugOverdose |> 
  dplyr::arrange(desc(year)) |>
  dplyr::filter(year >= max(year)-6) |>   # Select the 6 most recent year spans
  dplyr::mutate(#Passed into ggplot (PDF Plot) but displayed in plotly (HMTL Plot)
    toolTipTextHeader1 = "Year: "
    , toolTipTextValue1 = year
    , toolTipTextHeader2 = "\nLocation: "
    , toolTipTextValue2 = location
    , toolTipTextHeader3 = "\nAge-Adjusted Rate per 1,000: "
    , toolTipTextValue3 = scales::label_comma(accuracy = 0.01)(age_adjustedRatePer1000)
  )

minYr <- unique(min(filtered_data$year))
maxYr <- unique(max(filtered_data$year))

# Filtering data here handles table variations better and is easier to maintain than filtering in the function.
filtered_dataTbl <- filtered_data |> 
  dplyr::filter(year >= maxYr)  |>
  dplyr::arrange(fips) |>
  dplyr::mutate(placeholderCount = scales::label_comma()(valueCount)
                , placeholderRate = scales::label_comma(accuracy = 0.01)(age_adjustedRatePer1000)) |>   
  dplyr::select(year, location, placeholderCount, placeholderRate) # Ensure fields are ordered as desired.

figCap_plotTitle <- "Nonfatal Drug Overdose Age−Adjusted Rate (per 1,000 Residents)"
figSubcap <- "Data Source: @mdhNonFatalDrugOverdose"
plotXCaption <- paste("Data Source:",mdhNonFatalDrugOverdose) #Since the x axis is passed into plotly, I am defining the x axis for the plot with the data source so when/if people use the plot in their work the data source is referenced ggplot does a a caption argument but it does not pass into plotly. If the caption should be after the legend, then ggplot caption can be used for the pdf version and annotation can be used in plotly, I'll just have to pass an extra argument into the plotly function.

# Plot
scaleYContinuous = scales::label_comma()
#Table 
colList <- list("Year", "Location", "Count", "Age-Adjusted Rate") # Using a list accommodates tables with different column lengths.

#Define the plot here so it is only wrote once
p <- gbFun_plotTrendPDF(
    filtered_data, "year", "age_adjustedRatePer1000", "location", "fips", "toolTipTextHeader1",
    "toolTipTextValue1", "toolTipTextHeader2", "toolTipTextValue2", "toolTipTextHeader3", 
    "toolTipTextValue3", figCap_plotTitle, plotXCaption, "", minYr, maxYr, 
    scaleYContinuous, gbVal_colorScheme, gbVal_shapeScheme, ifelse(knitr::is_html_output(), 10, 14)
    )

```

<div>

::: {.content-visible when-format="html"}
```{r}
#| fig-width: 8
#| fig-height: 5
#| warning: false
if (knitr::is_html_output()) {
  # Create the ggplot plot ggplot and then its wrapped within plotly function
  gbFun_plotHTML(p, figCap_plotTitle)
}
```

```{r}
#| tbl-width: 8
#| tbl-height: 4
#| warning: false
if (knitr::is_html_output()) {
  gbFun_tableHTML(filtered_dataTbl, colList, figCap_plotTitle)
}
```
:::

::: {.content-visible when-format="pdf" layout="[[1, 1], [1]]"}
```{r}
#| warning: false
#| fig-width: 9
#| fig-height: 5
if (!knitr::is_html_output()) {
# Plots have to be printed
print(p)
}

```

```{r}
#| warning: false
#| tbl-width: 2
#| tbl-height: 5
if (!knitr::is_html_output()) {
#Tables shouldn't be printed because the HTML table will display
gbFun_tablePDF(filtered_dataTbl, colList)
}
```
:::

`{r} figSubcap`

</div>

`{r} figCap_plotTitle`
:::

::: {#fig-mdhFatalDrug}
```{r}
#| label: f_fatalDrugOverdose
#| warning: false
#| include: false

# Data Wrangling so it can just be referenced in the PDF and HTML output instead of writing it twice

filtered_data <- f_fatalDrugOverdose |> 
  dplyr::arrange(desc(year)) |>
  dplyr::filter(year >= max(year)-6, fips != 27000) |>   # Select the 6 most recent year spans
  dplyr::mutate(#Passed into ggplot (PDF Plot) but displayed in plotly (HMTL Plot)
    toolTipTextHeader1 = "Year: "
    , toolTipTextValue1 = year
    , toolTipTextHeader2 = "\nLocation: "
    , toolTipTextValue2 = location
    , toolTipTextHeader3 = "\nCount: "
    , toolTipTextValue3 = scales::label_comma()(valueCount)
  )

minYr <- unique(min(filtered_data$year))
maxYr <- unique(max(filtered_data$year))

# Filtering data here handles table variations better and is easier to maintain than filtering in the function.
filtered_dataTbl <- f_fatalDrugOverdose |> 
  dplyr::arrange(desc(year)) |>
  dplyr::filter(year >= max(year)-6) |> 
  dplyr::arrange(fips) |>
  dplyr::group_by(fips) |> 
  dplyr::mutate(totalCount = scales::label_comma()(sum(valueCount)), timeRange = paste0(minYr, "-", maxYr)) |>
  dplyr::ungroup() |> 
  dplyr::select(timeRange, location, totalCount) |> # Ensure fields are ordered as desired.
  dplyr::distinct()  

figCap_plotTitle <- "Number of Fatal Drug Overdoses by County of Residence"
figSubcap <- "Data Source: @mdhFatalDrugOverdose"
plotXCaption <- paste("Data Source:",mdhFatalDrugOverdose) #Since the x axis is passed into plotly, I am defining the x axis for the plot with the data source so when/if people use the plot in their work the data source is referenced ggplot does a a caption argument but it does not pass into plotly. If the caption should be after the legend, then ggplot caption can be used for the pdf version and annotation can be used in plotly, I'll just have to pass an extra argument into the plotly function.

# Plot
scaleYContinuous = scales::label_comma()
#Table 
colList <- list("Time Range", "Location", "Total Count") # Using a list accommodates tables with different column lengths.

#Define the plot here so it is only wrote once
p <- gbFun_plotTrendPDF(
    filtered_data, "year", "valueCount", "location", "fips", "toolTipTextHeader1",
    "toolTipTextValue1", "toolTipTextHeader2", "toolTipTextValue2", "toolTipTextHeader3", 
    "toolTipTextValue3", figCap_plotTitle, plotXCaption, "", minYr, maxYr, 
    scaleYContinuous, gbVal_colorScheme, gbVal_shapeScheme, ifelse(knitr::is_html_output(), 10, 14)
    )

```

<div>

::: {.content-visible when-format="html"}
```{r}
#| fig-width: 8
#| fig-height: 5
#| warning: false
if (knitr::is_html_output()) {
  # Create the ggplot plot ggplot and then its wrapped within plotly function
  gbFun_plotHTML(p, figCap_plotTitle)
}
```

```{r}
#| tbl-width: 8
#| tbl-height: 4
#| warning: false
if (knitr::is_html_output()) {
  gbFun_tableHTML(filtered_dataTbl, colList, figCap_plotTitle)
}
```
:::

::: {.content-visible when-format="pdf" layout="[[1, 1], [1]]"}
```{r}
#| warning: false
#| fig-width: 9
#| fig-height: 5
if (!knitr::is_html_output()) {
# Plots have to be printed
print(p)
}

```

```{r}
#| warning: false
#| tbl-width: 2
#| tbl-height: 5
if (!knitr::is_html_output()) {
#Tables shouldn't be printed because the HTML table will display
gbFun_tablePDF(filtered_dataTbl, colList)
}
```
:::

`{r} figSubcap`

</div>

`{r} figCap_plotTitle`
:::

### Polk-Norman-Mahnomen Environmental Scan

Between May and June of 2023, forty-two alcohol retailers were contacted to better understand what youth in our area are seeing about THC, and to provide information to county officials and legislators following cannabis legalization.

-   All 42 establishments in the scan sold alcohol products (beer, wine, and/or hard liquor).
-   18 establishments were within 1000 feet of a school or park/playground.
-   36 advertised the sale of alcohol outside their establishment.
-   13 had exterior signage regarding minimum purchase age, while 35 had interior signage regarding purchase age. Only 5 had signage related to the health risks of drinking alcohol.
-   Seven establishments were found to sell THC products (1 liquor store, 1 vape shop, 5 bars/bar and grills)

### Successes

Relationship Building: Most retailers were welcoming and appreciative of the scan. Building and continuing relationships with alcohol and THC retailers will strengthen PNM prevention efforts. There was also a high interest in RBST, as a value add for the business and to increase positive engagement with public health and law enforcement.

### Minimum Purchase Age

Most establishments had clear signage indicating only persons 21 years of age and older are allowed in the bar area and that they check identification. 80% of establishments had interior signage about minimum purchase age of alcohol.

### Polk County Opioid Funding Prioritization Survey

The Polk County Opioid Funding Prioritization Survey gathered input from community members to guide the allocation of over \$3 million from the national opioid settlement. The survey, conducted from June 12 to July 24, 2023, received 137 responses, with a majority prioritizing prevention, treatment, and recovery support. Key areas identified for funding include primary prevention, community development, and treatment expansion. The survey also highlighted the importance of harm reduction strategies such as overdose reversal and social detox. The results have shaped the county's approach to addressing the opioid crisis over the next 18 years [@polkOpioid]. If you are reading this on the computer and need more information, please click the following links for more information [Polk-County-Opioid-Funding-Prioritization-Survey-Results](https://www.co.polk.mn.us/DocumentCenter/View/2073/Polk-County-Opioid-Funding-Prioritization-Survey-Results?bidId=) [Opioid Settlement Advisory Council](https://www.co.polk.mn.us/546/Opioid-Settlement-Advisory-Council).

## Alcohol

Binge drinking is a public health concern that affects our communities and the state of Minnesota at similar rates. Approximately 1 in 5 individuals in Minnesota, including those in our three counties, engage in binge drinking. This widespread behavior poses various health risks, including alcohol poisoning, injuries, and long-term health issues such as liver disease, heart disease, and cancer. Binge drinking can also lead to risky behaviors, such as unsafe sexual practices and impaired driving, which further endanger individuals and communities.

::: {#fig-riskFactorBingeDrinking}
```{r}
#| label: f_places2022Binge
#| warning: false
#| include: false

# Filter the data by 'measureid'
filtered_data <- f_places2022 |> 
  dplyr::filter(measureid == "BINGE") |> 
  dplyr::mutate(#Passed into ggplot (PDF Plot) but displayed in plotly (HMTL Plot)
    toolTipTextHeader1 = "\nLocation: "
    , toolTipTextValue1 = locationname
    , toolTipTextHeader2 = "\nPrevalence: "
    , toolTipTextValue2 = paste0(formattable::comma(data_value,0), " (", formattable::comma(low_confidence_limit,0), "-", formattable::comma(high_confidence_limit,0), ")")
  )

filtered_dataTbl <- filtered_data |> 
    dplyr::arrange(locationid, year) |> 
    dplyr::mutate(prevalenceType = ifelse(datavaluetypeid == "CrdPrv", "Crude", "Age-Adjusted"),
                  tab = ifelse(datavaluetypeid == "CrdPrv", "Crude Prevalence", "Age-Adjusted Prevalence")) |> 
    dplyr::select(prevalenceType, locationname, low_confidence_limit, data_value, high_confidence_limit, tab)
  
figCap_plotTitle <- paste(filtered_data$measure[1], filtered_data$brfssYr[1])
figSubcap <- "Data Source: @cdc2024Places"
plotXCaption <- paste("Data Source:",cdc2024Places) #Since the x axis is passed into plotly, I am defining the x axis for the plot with the data source so when/if people use the plot in their work the data source is referenced ggplot does a a caption argument but it does not pass into plotly. If the caption should be after the legend, then ggplot caption can be used for the pdf version and annotation can be used in plotly, I'll just have to pass an extra argument into the plotly function.

#Table 
colList <- list("Type", "Location", "Low CI", "Prevalence", "High CI") # Using a list accommodates tables with different column lengths.

#Define the plot here so it is only wrote once
p <- gbFun_plotSingleYrPDF(filtered_data, "locationname", "locationid","data_value", "toolTipTextHeader1", 
    "toolTipTextValue1", "toolTipTextHeader2", "toolTipTextValue2", "data_value_type",
    "low_confidence_limit", "high_confidence_limit", figCap_plotTitle, plotXCaption, "Prevalence",
    gbVal_colorScheme, ifelse(knitr::is_html_output(), 10, 12)
    )
```

<div>

::: {.content-visible when-format="html"}
```{r}
#| fig-width: 8
#| fig-height: 5 

if (knitr::is_html_output()) {
# Create the ggplot plot ggplot and then its wrapped within plotly function
gbFun_plotHTML(p, figCap_plotTitle)
}
```

```{r}
#| tbl-width: 8
#| tbl-height: 4
#| warning: false
#| results: asis
if (knitr::is_html_output()) {
  
  split_data <- split(filtered_dataTbl, filtered_dataTbl$tab)
  
# Generate tabset panels
  cat("::: {.panel-tabset}\n")
     for (tab in names(split_data)) {
       cat(sprintf("## %s\n\n", tab))
       
       # Remove the 'tab' column from the current subset of data
       current_data <- split_data[[tab]][, !names(split_data[[tab]]) %in% "tab"]
       
       print(htmltools::tagList(gbFun_tableHTML(current_data, colList, figCap_plotTitle)))
     }
  cat(":::\n")

}
```
:::

::: {.content-visible when-format="pdf" layout="[[1],[1, 1]]"}
```{r}
#| fig-width: 11
#| fig-height: 3
#| warning: false

if (!knitr::is_html_output()) {
# Plots have to be printed
print(p)
}
```

```{r}
#| tbl-width: 4
#| tbl-height: 3
#| warning: false
if (!knitr::is_html_output()) {
  gbFun_tablePDF(filtered_dataTbl |> dplyr::filter(prevalenceType == "Crude") |> dplyr::select(-tab), colList)
}
```

```{r}
#| tbl-width: 4
#| tbl-height: 3
#| warning: false
if (!knitr::is_html_output()) {
  gbFun_tablePDF(filtered_dataTbl |> dplyr::filter(prevalenceType == "Age-Adjusted") |> dplyr::select(-tab), colList)
}
```
:::

`{r} figSubcap`

</div>

`{r} figCap_plotTitle`
:::

## Smoking

Smoking remains a critical public health issue for local communities, impacting overall health and well-being. While Mahnomen County has historically had a higher percentage of mothers who smoked during pregnancy, it is encouraging to see a significant decline in this behavior from 2021 to 2022. Changing any habit is challenging, and maintaining these changes takes time, making this decrease particularly noteworthy.

However, it is important to note that Mahnomen County also has a significantly higher smoking rate among all adults compared to the other counties. This higher prevalence of smoking poses various health risks, including respiratory diseases, cardiovascular diseases, and cancer. Addressing smoking rates remains a critical public health priority to improve overall community health and reduce the burden of smoking-related illnesses.

Preventing tobacco use among youth is essential for protecting long-term health and well-being. Early exposure to nicotine increases the risk of addiction and lifelong use. By focusing on prevention, communities can reduce future health problems, lower healthcare costs, and support healthier environments for young people.

::: {#fig-kidsCountPctMomsSmoke}
```{r}
#| label: f_kidsCountMotherSmoke
#| warning: false
#| include: false

# Data Wrangling so it can just be referenced in the PDF and HTML output instead of writing it twice

filtered_data <- f_kidsCountMotherSmoke |> 
  dplyr::filter(year >= max(year)-6) |>   # Select the 6 most recent year spans
  dplyr::mutate(#Passed into ggplot (PDF Plot) but displayed in plotly (HMTL Plot)
    toolTipTextHeader1 = "Year: "
    , toolTipTextValue1 = year
    , toolTipTextHeader2 = "\nLocation: "
    , toolTipTextValue2 = location
    , toolTipTextHeader3 = "\nPercentage: "
    , toolTipTextValue3 = scales::label_percent(accuracy = 0.01)(dataValue)
  )

minYr <- unique(min(filtered_data$year))
maxYr <- unique(max(filtered_data$year))

# Filtering data here handles table variations better and is easier to maintain than filtering in the function.

filtered_dataTbl <- filtered_data |> 
  dplyr::filter(year >= maxYr-1)  |>
  dplyr::arrange(fips, year) |>
  dplyr::group_by(fips) |> 
  dplyr::summarize(
    Location = location
    , valueMinYr = dataValue[year == min(year)]
    , valueMaxYr = dataValue[year == max(year)]
    , pctDifference = valueMaxYr - valueMinYr
    , .groups = 'drop'
  ) |>
  dplyr::distinct() |> 
  dplyr::select(-fips) |>  
  dplyr::mutate(
    valueMinYr = scales::label_percent(accuracy = .01)(valueMinYr)
    , valueMaxYr = scales::label_percent(accuracy = .01)(valueMaxYr)
    , pctDifference = scales::label_percent(accuracy = .01)(pctDifference)
    ) |>
  dplyr::rename("% Change" = pctDifference) |> 
  dplyr::rename_with(~ paste0("Prenatal Smoking ", maxYr-1), valueMinYr)  |> 
  dplyr::rename_with(~ paste0("Prenatal Smoking ", maxYr), valueMaxYr)


figCap_plotTitle <- " Percentage of Mothers Who Smoked During Pregnancy"
figSubcap <- "Data Source: @kidsCountMothersWhoSmoked"
plotXCaption <- paste("Data Source:",kidsCountMothersWhoSmoked) #Since the x axis is passed into plotly, I am defining the x axis for the plot with the data source so when/if people use the plot in their work the data source is referenced ggplot does a a caption argument but it does not pass into plotly. If the caption should be after the legend, then ggplot caption can be used for the pdf version and annotation can be used in plotly, I'll just have to pass an extra argument into the plotly function.

# Plot
scaleYContinuous = scales::label_percent()
#Table 
colList <- colnames(filtered_dataTbl) # Using a list accommodates tables with different column lengths.

#Define the plot here so it is only wrote once
p <- gbFun_plotTrendPDF(
    filtered_data, "year", "dataValue", "location", "fips", "toolTipTextHeader1",
    "toolTipTextValue1", "toolTipTextHeader2", "toolTipTextValue2", "toolTipTextHeader3", 
    "toolTipTextValue3", figCap_plotTitle, plotXCaption, "", minYr, maxYr, 
    scaleYContinuous, gbVal_colorScheme, gbVal_shapeScheme, ifelse(knitr::is_html_output(), 10, 14)
    )
```

<div>

::: {.content-visible when-format="html"}
```{r}
#| fig-width: 8
#| fig-height: 5
#| warning: false
if (knitr::is_html_output()) {
  # Create the ggplot plot ggplot and then its wrapped within plotly function
  gbFun_plotHTML(p, figCap_plotTitle)
}
```

```{r}
#| tbl-width: 8
#| tbl-height: 4
#| warning: false
if (knitr::is_html_output()) {
  gbFun_tableHTML(filtered_dataTbl, colList, figCap_plotTitle)
}
```
:::

::: {.content-visible when-format="pdf" layout="[[1, 1], [1]]"}
```{r}
#| warning: false
#| fig-width: 9
#| fig-height: 5
if (!knitr::is_html_output()) {
# Plots have to be printed
print(p)
}

```

```{r}
#| warning: false
#| tbl-width: 2
#| tbl-height: 5
if (!knitr::is_html_output()) {
#Tables shouldn't be printed because the HTML table will display
gbFun_tablePDF(filtered_dataTbl, colList)
}
```
:::

`{r} figSubcap`

</div>

`{r} figCap_plotTitle`
:::

::: {#fig-riskFactorSmoking}
```{r}
#| label: f_places2022CSmoking
#| warning: false
#| include: false

# Filter the data by 'measureid'
filtered_data <- f_places2022 |> 
  dplyr::filter(measureid == "CSMOKING") |> 
  dplyr::mutate(#Passed into ggplot (PDF Plot) but displayed in plotly (HMTL Plot)
    toolTipTextHeader1 = "\nLocation: "
    , toolTipTextValue1 = locationname
    , toolTipTextHeader2 = "\nPrevalence: "
    , toolTipTextValue2 = paste0(formattable::comma(data_value,0), " (", formattable::comma(low_confidence_limit,0), "-", formattable::comma(high_confidence_limit,0), ")")
  )

filtered_dataTbl <- filtered_data |> 
    dplyr::arrange(locationid, year) |> 
    dplyr::mutate(prevalenceType = ifelse(datavaluetypeid == "CrdPrv", "Crude", "Age-Adjusted"),
                  tab = ifelse(datavaluetypeid == "CrdPrv", "Crude Prevalence", "Age-Adjusted Prevalence")) |> 
    dplyr::select(prevalenceType, locationname, low_confidence_limit, data_value, high_confidence_limit, tab)
  
figCap_plotTitle <- paste(filtered_data$measure[1], filtered_data$brfssYr[1])
figSubcap <- "Data Source: @cdc2024Places"
plotXCaption <- paste("Data Source:",cdc2024Places) #Since the x axis is passed into plotly, I am defining the x axis for the plot with the data source so when/if people use the plot in their work the data source is referenced ggplot does a a caption argument but it does not pass into plotly. If the caption should be after the legend, then ggplot caption can be used for the pdf version and annotation can be used in plotly, I'll just have to pass an extra argument into the plotly function.


#Table 
colList <- list("Type", "Location", "Low CI", "Prevalence", "High CI") # Using a list accommodates tables with different column lengths.

#Define the plot here so it is only wrote once
p <- gbFun_plotSingleYrPDF(filtered_data, "locationname", "locationid","data_value", "toolTipTextHeader1", 
    "toolTipTextValue1", "toolTipTextHeader2", "toolTipTextValue2", "data_value_type",
    "low_confidence_limit", "high_confidence_limit", figCap_plotTitle, plotXCaption, "Prevalence",
    gbVal_colorScheme, ifelse(knitr::is_html_output(), 10, 12)
    )
```

<div>

::: {.content-visible when-format="html"}
```{r}
#| fig-width: 8
#| fig-height: 5 

if (knitr::is_html_output()) {
# Create the ggplot plot ggplot and then its wrapped within plotly function
gbFun_plotHTML(p, figCap_plotTitle)
}
```

```{r}
#| tbl-width: 8
#| tbl-height: 4
#| warning: false
#| results: asis
if (knitr::is_html_output()) {
  
  split_data <- split(filtered_dataTbl, filtered_dataTbl$tab)
  
# Generate tabset panels
  cat("::: {.panel-tabset}\n")
     for (tab in names(split_data)) {
       cat(sprintf("## %s\n\n", tab))
       
       # Remove the 'tab' column from the current subset of data
       current_data <- split_data[[tab]][, !names(split_data[[tab]]) %in% "tab"]
       
       print(htmltools::tagList(gbFun_tableHTML(current_data, colList, figCap_plotTitle)))
     }
  cat(":::\n")

}
```
:::

::: {.content-visible when-format="pdf" layout="[[1],[1, 1]]"}
```{r}
#| fig-width: 11
#| fig-height: 3
#| warning: false

if (!knitr::is_html_output()) {
# Plots have to be printed
print(p)
}
```

```{r}
#| tbl-width: 4
#| tbl-height: 3
#| warning: false
if (!knitr::is_html_output()) {
  gbFun_tablePDF(filtered_dataTbl |> dplyr::filter(prevalenceType == "Crude") |> dplyr::select(-tab), colList)
}
```

```{r}
#| tbl-width: 4
#| tbl-height: 3
#| warning: false
if (!knitr::is_html_output()) {
  gbFun_tablePDF(filtered_dataTbl |> dplyr::filter(prevalenceType == "Age-Adjusted") |> dplyr::select(-tab), colList)
}
```
:::

`{r} figSubcap`

</div>

`{r} figCap_plotTitle`
:::

::: {#fig-YouthCommercialTobaccoUse layout-ncol="3"}
[![](Attachments/mnMap_polk.png)](https://www.health.state.mn.us/communities/tobacco/data/docs/profiles/polk.pdf)

[![](Attachments/mnMap_norman.png)](https://www.health.state.mn.us/communities/tobacco/data/docs/profiles/norman.pdf)

[![](Attachments/mnMap_mahnomen.png)](https://www.health.state.mn.us/communities/tobacco/data/docs/profiles/mahnomen.pdf)

Please click on the corresponding map above for more detailed youth commercial tobacco use information.
:::

## Food Shelf Household Visits

In 2022, food shelf visits in Polk, Norman, and Mahnomen counties reflected a need for food assistance.

-   Polk County: Households made numerous visits to food shelves, highlighting the ongoing struggle with food insecurity in the area.
-   Norman County: Similarly, there was a notable increase in food shelf visits, indicating that many families are facing economic challenges and require additional support.
-   Mahnomen County: The county experienced a high number of food shelf visits, underscoring the severe need for food assistance among its residents.

These trends align with the broader state data, which saw a record high of 5.5 million food shelf visits in Minnesota and was driven by rising food prices and increased demand from seniors, adults, and children [@hungerSolutionsFoodShelf2022].

::: {#fig-foodShelfHousehold}
```{r}
#| label: f_foodShelfHousehold
#| warning: false
#| include: false

# Data Wrangling so it can just be referenced in the PDF and HTML output instead of writing it twice

filtered_data <- f_foodShelf |> 
  dplyr::filter(year >= max(year)-6, measure == "Household") |>   # Select the 6 most recent year spans
  dplyr::mutate(#Passed into ggplot (PDF Plot) but displayed in plotly (HMTL Plot)
    toolTipTextHeader1 = "Year: "
    , toolTipTextValue1 = year
    , toolTipTextHeader2 = "\nLocation: "
    , toolTipTextValue2 = location
    , toolTipTextHeader3 = "\nHousehold Visits: "
    , toolTipTextValue3 = scales::label_comma()(rawValue)
  )

minYr <- unique(min(filtered_data$year))
maxYr <- unique(max(filtered_data$year))

# Filtering data here handles table variations better and is easier to maintain than filtering in the function.
# filtered_dataTbl <- filtered_data |>
#   dplyr::filter(year >= maxYr-1)  |>
#   dplyr::arrange(fips, year) |>
#   dplyr::mutate(placeholder = scales::label_comma()(rawValue)) |>
#   dplyr::group_by(fips) |>
#   dplyr::mutate(percentageDifference = dplyr::case_when(
#       year == maxYr ~ (dplyr::last(rawValue) - dplyr::first(rawValue)) / dplyr::first(rawValue)
#       , TRUE ~ NA_real_
#     )
#     , percentageDifference = ifelse(is.na(percentageDifference), "--", scales::label_percent(accuracy = .01)(percentageDifference))
#   ) |>
#   dplyr::ungroup() |>
#   dplyr::select(year, location, placeholder, percentageDifference) # Ensure fields are ordered as desired.

filtered_dataTbl <- filtered_data |>
  dplyr::filter(year >= maxYr-1)  |>
  dplyr::arrange(fips, year) |>
  dplyr::group_by(fips) |>
  dplyr::summarize(
    Location = location
    , valueMinYr = rawValue[year == min(year)]
    , valueMaxYr = rawValue[year == max(year)]
    , pctDifference = (valueMaxYr - valueMinYr) / valueMinYr
    , .groups = 'drop'
  ) |> 
  dplyr::distinct() |>
  dplyr::select(-fips) |>   
  dplyr::mutate(
    valueMinYr = scales::label_comma(accuracy = .01)(valueMinYr)
    , valueMaxYr = scales::label_comma(accuracy = .01)(valueMaxYr)
    , pctDifference = scales::label_percent(accuracy = .01)(pctDifference)
    ) |> 
  dplyr::rename("% Difference" = pctDifference) |>  
  dplyr::rename_with(~ paste0("Household Visits ", maxYr-1), valueMinYr)  |>
  dplyr::rename_with(~ paste0("Household Visits ", maxYr), valueMaxYr)

figCap_plotTitle <- "Food Shelf Household Visits"
figSubcap <- "Data Source: @hungerSolutionsFoodShelfDataRequest"
plotXCaption <- paste("Data Source:",hungerSolutionsFoodShelfDataRequest) #Since the x axis is passed into plotly, I am defining the x axis for the plot with the data source so when/if people use the plot in their work the data source is referenced ggplot does a a caption argument but it does not pass into plotly. If the caption should be after the legend, then ggplot caption can be used for the pdf version and annotation can be used in plotly, I'll just have to pass an extra argument into the plotly function.

# Plot
scaleYContinuous = scales::label_comma()
#Table 
colList <- colnames(filtered_dataTbl) # Using a list accommodates tables with different column lengths.

#Define the plot here so it is only wrote once
p <- gbFun_plotTrendPDF(
    filtered_data, "year", "rawValue", "location", "fips", "toolTipTextHeader1",
    "toolTipTextValue1", "toolTipTextHeader2", "toolTipTextValue2", "toolTipTextHeader3", 
    "toolTipTextValue3", figCap_plotTitle, plotXCaption, "", minYr, maxYr, 
    scaleYContinuous, gbVal_colorScheme, gbVal_shapeScheme, ifelse(knitr::is_html_output(), 10, 14)
    )
```

<div>

::: {.content-visible when-format="html"}
```{r}
#| fig-width: 8
#| fig-height: 5
#| warning: false
if (knitr::is_html_output()) {
  # Create the ggplot plot ggplot and then its wrapped within plotly function
  gbFun_plotHTML(p, figCap_plotTitle)
}
```

```{r}
#| tbl-width: 8
#| tbl-height: 4
#| warning: false
if (knitr::is_html_output()) {
  gbFun_tableHTML(filtered_dataTbl, colList, figCap_plotTitle)
}
```
:::

::: {.content-visible when-format="pdf" layout="[[1, 1], [1]]"}
```{r}
#| warning: false
#| fig-width: 9
#| fig-height: 5
if (!knitr::is_html_output()) {
# Plots have to be printed
print(p)
}

```

```{r}
#| warning: false
#| tbl-width: 2
#| tbl-height: 5
if (!knitr::is_html_output()) {
#Tables shouldn't be printed because the HTML table will display
gbFun_tablePDF(filtered_dataTbl, colList)
}
```
:::

`{r} figSubcap`

</div>

`{r} figCap_plotTitle`
:::

## Farmer's Markets

Farmers markets offer a variety of programs to make fresh, local produce more accessible to everyone in the community. Programs like Market Bucks, which match SNAP/EBT spending dollar-for-dollar up to \$10, help stretch food budgets and encourage healthy eating. The WIC Farmers Market Nutrition Program provides additional support for women, infants, and children, ensuring they have access to nutritious foods.

Local initiatives, such as the Power of Produce (PoP) program, offer incentives for children and seniors to engage with farmers markets, promoting lifelong healthy eating habits. These programs not only support individual health but also strengthen community ties and local economies.

[![](Attachments/060_healthBehaviors/wicDollars.png){fig-align="center" width="338"}](https://www.health.state.mn.us/docs/people/wic/localagency/reports/pptndemo/wicdollars.pdf)

## Nutrition

Eating enough fruits and vegetables is essential for growing bodies and lifelong health. These foods provide important vitamins, minerals, and fiber that help support physical development, boost the immune system, and reduce the risk of chronic diseases. Encouraging youth to eat five or more servings each day helps build healthy habits early and supports better focus, energy, and well-being in school and daily life.

In 2022, 22.2 percent of 8th graders in Mahnomen County reported eating five or more servings of fruits and vegetables each day over the past week. Polk County had 17.4 percent, and the statewide rate in Minnesota was 16.4 percent. These numbers suggest that most youth are not getting enough fruits and vegetables, which may impact their growth, energy, and long-term health. Increasing access to healthy foods and promoting nutrition education can help improve these outcomes across the region.

::: {#fig-mss8GradeFruitVegetableConsumption}
```{r}
#| label: mss8GradeFruitVegetableConsumption
#| warning: false
#| include: false

# Data Wrangling so it can just be referenced in the PDF and HTML output instead of writing it twice

filtered_data <- f_mss |> 
  dplyr::filter(mss_topic == "Servings of fruits, fruit juice, and vegetables per day during the last 7 days. (This is a computed variable based on cominations of responses of three other items.)", grade == 8)  |> 
  dplyr::mutate(#Passed into ggplot (PDF Plot) but displayed in plotly (HMTL Plot)
    toolTipTextHeader1 = "Year: "
    , toolTipTextValue1 = year
    , toolTipTextHeader2 = "\nLocation: "
    , toolTipTextValue2 = location
    , toolTipTextHeader3 = "\n8th Graders 5+ Fruit & Vegetable Servings Per Day Last Seven Days: "
    , toolTipTextValue3 = scales::label_percent(accuracy = .01)(pct)
  )

minYr <- unique(min(filtered_data$year))
maxYr <- unique(max(filtered_data$year))

# Filtering data here handles table variations better and is easier to maintain than filtering in the function.
filtered_dataTbl <- filtered_data |> 
  dplyr::filter(year >= maxYr-3)  |>
  dplyr::arrange(fips, year) |>
  dplyr::group_by(fips) |> 
  dplyr::summarize(
    Location = location
    , valueMinYr = dplyr::case_when(
        min(year) == max(year) ~ NA,
        TRUE ~ pct[year == min(year)]
    )
    , valueMaxYr = pct[year == max(year)]
    , pctDifference = valueMaxYr - valueMinYr
    , .groups = 'drop'
  ) |>
  dplyr::distinct() |> 
  dplyr::select(-fips) |>  
  dplyr::mutate(
    valueMinYr = scales::label_percent(accuracy = .01)(valueMinYr)
    , valueMaxYr = scales::label_percent(accuracy = .01)(valueMaxYr)
    , pctDifference = scales::label_percent(accuracy = .01)(pctDifference)
    ) |>
  dplyr::rename("% Change" = pctDifference) |> 
  dplyr::rename_with(~ paste0("5+ Servings Per Day ", maxYr-3), valueMinYr)  |> 
  dplyr::rename_with(~ paste0("5+ Servings Per Day ", maxYr), valueMaxYr) 


figCap_plotTitle <- "Percentage of 8th Graders Reporting 5+ Daily Servings of Fruits and Vegetables (MSS)"
figSubcap <- "Data Source: @mdeMinnesotaStudentSurvey"
plotXCaption <- paste("Data Source:", mdeMinnesotaStudentSurvey) #Since the x axis is passed into plotly, I am defining the x axis for the plot with the data source so when/if people use the plot in their work the data source is referenced ggplot does a a caption argument but it does not pass into plotly. If the caption should be after the legend, then ggplot caption can be used for the pdf version and annotation can be used in plotly, I'll just have to pass an extra argument into the plotly function.

# Plot
scaleYContinuous = scales::label_percent()  # Format y-axis values with geography
#Table
colList <- colnames(filtered_dataTbl) # Using a list accommodates tables with different column lengths.

#Define the plot here so it is only wrote once
p <- gbFun_plotTrendPDF(
    filtered_data, "year", "pct", "location", "fips", "toolTipTextHeader1", "toolTipTextValue1", 
    "toolTipTextHeader2", "toolTipTextValue2", "toolTipTextHeader3", "toolTipTextValue3", figCap_plotTitle,
    plotXCaption, "", minYr, maxYr, scaleYContinuous,
    gbVal_colorScheme, gbVal_shapeScheme, ifelse(knitr::is_html_output(), 10, 14)
    )
```

<div>

::: {.content-visible when-format="html"}
```{r}
#| fig-width: 8
#| fig-height: 5
#| warning: false
if (knitr::is_html_output()) {
  # Create the ggplot plot ggplot and then its wrapped within plotly function
  gbFun_plotHTML(p, figCap_plotTitle)
}
```

```{r}
#| tbl-width: 8
#| tbl-height: 4
#| warning: false
if (knitr::is_html_output()) {
  gbFun_tableHTML(filtered_dataTbl, colList, figCap_plotTitle)
}
```
:::

::: {.content-visible when-format="pdf" layout="[[1, 1], [1]]"}
```{r}
#| warning: false
#| fig-width: 9
#| fig-height: 5
if (!knitr::is_html_output()) {
# Plots have to be printed
print(p)
}
```

```{r}
#| warning: false
#| tbl-width: 2
#| tbl-height: 5
if (!knitr::is_html_output()) {
#Tables shouldn't be printed because the HTML table will display
gbFun_tablePDF(filtered_dataTbl, colList)
}
```
:::

`{r} figSubcap`

</div>

`{r} figCap_plotTitle`
:::

## Physical Activity

In 2022, many adults in the PNM region reported not getting any physical activity during their free time. This includes activities like walking, biking, or playing sports. Mahnomen County had the highest percentage of adults who did not get leisure-time exercise, with more than 30 percent. Norman County and the PMN CHS region also had high rates, with more than one in four adults reporting no activity. Polk County and Minnesota overall had lower rates, closer to one in five adults.

Youth physical activity trends show a more encouraging picture. According to the Minnesota Student Survey, the percentage of 11th graders who were active for 60 minutes every day of the week increased statewide from 13.8 percent in 2019 to 16.5 percent in 2022. Polk County showed even greater improvement, rising from 14.5 percent in 2019 to 20.3 percent in 2022. This is an increase of 5.8 percentage points. Updated data for Mahnomen and Norman counties was not available.

These findings suggest that while youth activity may be improving, adult physical inactivity remains a concern in several communities. Continued investment in safe walking paths, affordable fitness programs, and community events that promote movement could help address these disparities.

::: {#fig-riskFactorLeisurePhysicalActivity}
```{r}
#| label: f_places2022LPA
#| warning: false
#| include: false

# Filter the data by 'measureid'
filtered_data <- f_places2022 |> 
  dplyr::filter(measureid == "LPA") |> 
  dplyr::mutate(#Passed into ggplot (PDF Plot) but displayed in plotly (HMTL Plot)
    toolTipTextHeader1 = "\nLocation: "
    , toolTipTextValue1 = locationname
    , toolTipTextHeader2 = "\nPrevalence: "
    , toolTipTextValue2 = paste0(formattable::comma(data_value,0), " (", formattable::comma(low_confidence_limit,0), "-", formattable::comma(high_confidence_limit,0), ")")
  )

filtered_dataTbl <- filtered_data |> 
    dplyr::arrange(locationid, year) |> 
    dplyr::mutate(prevalenceType = ifelse(datavaluetypeid == "CrdPrv", "Crude", "Age-Adjusted"),
                  tab = ifelse(datavaluetypeid == "CrdPrv", "Crude Prevalence", "Age-Adjusted Prevalence")) |> 
    dplyr::select(prevalenceType, locationname, low_confidence_limit, data_value, high_confidence_limit, tab)
  
figCap_plotTitle <- paste(filtered_data$measure[1], filtered_data$brfssYr[1])
figSubcap <- "Data Source: @cdc2024Places"
plotXCaption <- paste("Data Source:",cdc2024Places) #Since the x axis is passed into plotly, I am defining the x axis for the plot with the data source so when/if people use the plot in their work the data source is referenced ggplot does a a caption argument but it does not pass into plotly. If the caption should be after the legend, then ggplot caption can be used for the pdf version and annotation can be used in plotly, I'll just have to pass an extra argument into the plotly function.

#Table 
colList <- list("Type", "Location", "Low CI", "Prevalence", "High CI") # Using a list accommodates tables with different column lengths.

#Define the plot here so it is only wrote once
p <- gbFun_plotSingleYrPDF(filtered_data, "locationname", "locationid","data_value", "toolTipTextHeader1", 
    "toolTipTextValue1", "toolTipTextHeader2", "toolTipTextValue2", "data_value_type",
    "low_confidence_limit", "high_confidence_limit", figCap_plotTitle, plotXCaption, "Prevalence",
    gbVal_colorScheme, ifelse(knitr::is_html_output(), 10, 12)
    )
```

<div>

::: {.content-visible when-format="html"}
```{r}
#| fig-width: 8
#| fig-height: 5 

if (knitr::is_html_output()) {
# Create the ggplot plot ggplot and then its wrapped within plotly function
gbFun_plotHTML(p, figCap_plotTitle)
}
```

```{r}
#| tbl-width: 8
#| tbl-height: 4
#| warning: false
#| results: asis
if (knitr::is_html_output()) {
  
  split_data <- split(filtered_dataTbl, filtered_dataTbl$tab)
  
# Generate tabset panels
  cat("::: {.panel-tabset}\n")
     for (tab in names(split_data)) {
       cat(sprintf("## %s\n\n", tab))
       
       # Remove the 'tab' column from the current subset of data
       current_data <- split_data[[tab]][, !names(split_data[[tab]]) %in% "tab"]
       
       print(htmltools::tagList(gbFun_tableHTML(current_data, colList, figCap_plotTitle)))
     }
  cat(":::\n")

}
```
:::

::: {.content-visible when-format="pdf" layout="[[1],[1, 1]]"}
```{r}
#| fig-width: 11
#| fig-height: 3
#| warning: false

if (!knitr::is_html_output()) {
# Plots have to be printed
print(p)
}
```

```{r}
#| tbl-width: 4
#| tbl-height: 3
#| warning: false
if (!knitr::is_html_output()) {
  gbFun_tablePDF(filtered_dataTbl |> dplyr::filter(prevalenceType == "Crude") |> dplyr::select(-tab), colList)
}
```

```{r}
#| tbl-width: 4
#| tbl-height: 3
#| warning: false
if (!knitr::is_html_output()) {
  gbFun_tablePDF(filtered_dataTbl |> dplyr::filter(prevalenceType == "Age-Adjusted") |> dplyr::select(-tab), colList)
}
```
:::

`{r} figSubcap`

</div>

`{r} figCap_plotTitle`
:::

::: {#fig-mss11Grade7Day1HourPhysicalActivity}
```{r}
#| label: mss11Grade7Day1HourPhysicalActivity
#| warning: false
#| include: false

# Data Wrangling so it can just be referenced in the PDF and HTML output instead of writing it twice

filtered_data <- f_mss |> 
  dplyr::filter(mss_topic == "During the last 7 days, on how many days were you physically active for a total of AT LEAST 60 MINUTES PER DAY? 7 Days", grade == 11)  |> 
  dplyr::mutate(#Passed into ggplot (PDF Plot) but displayed in plotly (HMTL Plot)
    toolTipTextHeader1 = "Year: "
    , toolTipTextValue1 = year
    , toolTipTextHeader2 = "\nLocation: "
    , toolTipTextValue2 = location
    , toolTipTextHeader3 = "\n11th Graders Active All 7 Days (60+ Min): "
    , toolTipTextValue3 = scales::label_percent(accuracy = .01)(pct)
  )

minYr <- unique(min(filtered_data$year))
maxYr <- unique(max(filtered_data$year))

# Filtering data here handles table variations better and is easier to maintain than filtering in the function.
filtered_dataTbl <- filtered_data |> 
  dplyr::filter(year >= maxYr-3)  |>
  dplyr::arrange(fips, year) |>
  dplyr::group_by(fips) |> 
  dplyr::summarize(
    Location = location
    , valueMinYr = pct[year == min(year)]
    , valueMaxYr = pct[year == max(year)]
    , pctDifference = valueMaxYr - valueMinYr
    , .groups = 'drop'
  ) |>
  dplyr::distinct() |> 
  dplyr::select(-fips) |>  
  dplyr::mutate(
    valueMinYr = scales::label_percent(accuracy = .01)(valueMinYr)
    , valueMaxYr = scales::label_percent(accuracy = .01)(valueMaxYr)
    , pctDifference = scales::label_percent(accuracy = .01)(pctDifference)
    ) |>
  dplyr::rename("% Change" = pctDifference) |> 
  dplyr::rename_with(~ paste0("Active All 7 Days ", maxYr-3), valueMinYr)  |> 
  dplyr::rename_with(~ paste0("Active All 7 Days ", maxYr), valueMaxYr)   


figCap_plotTitle <- "Percentage of 11th Graders Reporting 60+ Min Physical Activity for ALl 7 Days (MSS)"
figSubcap <- "Data Source: @mdeMinnesotaStudentSurvey"
plotXCaption <- paste("Data Source:", mdeMinnesotaStudentSurvey) #Since the x axis is passed into plotly, I am defining the x axis for the plot with the data source so when/if people use the plot in their work the data source is referenced ggplot does a a caption argument but it does not pass into plotly. If the caption should be after the legend, then ggplot caption can be used for the pdf version and annotation can be used in plotly, I'll just have to pass an extra argument into the plotly function.

# Plot
scaleYContinuous = scales::label_percent()  # Format y-axis values with geography
#Table
colList <- colnames(filtered_dataTbl) # Using a list accommodates tables with different column lengths.

#Define the plot here so it is only wrote once
p <- gbFun_plotTrendPDF(
    filtered_data, "year", "pct", "location", "fips", "toolTipTextHeader1", "toolTipTextValue1", 
    "toolTipTextHeader2", "toolTipTextValue2", "toolTipTextHeader3", "toolTipTextValue3", figCap_plotTitle,
    plotXCaption, "", minYr, maxYr, scaleYContinuous,
    gbVal_colorScheme, gbVal_shapeScheme, ifelse(knitr::is_html_output(), 10, 14)
    )
```

<div>

::: {.content-visible when-format="html"}
```{r}
#| fig-width: 8
#| fig-height: 5
#| warning: false
if (knitr::is_html_output()) {
  # Create the ggplot plot ggplot and then its wrapped within plotly function
  gbFun_plotHTML(p, figCap_plotTitle)
}
```

```{r}
#| tbl-width: 8
#| tbl-height: 4
#| warning: false
if (knitr::is_html_output()) {
  gbFun_tableHTML(filtered_dataTbl, colList, figCap_plotTitle)
}
```
:::

::: {.content-visible when-format="pdf" layout="[[1, 1], [1]]"}
```{r}
#| warning: false
#| fig-width: 9
#| fig-height: 5
if (!knitr::is_html_output()) {
# Plots have to be printed
print(p)
}
```

```{r}
#| warning: false
#| tbl-width: 2
#| tbl-height: 5
if (!knitr::is_html_output()) {
#Tables shouldn't be printed because the HTML table will display
gbFun_tablePDF(filtered_dataTbl, colList)
}
```
:::

`{r} figSubcap`

</div>

`{r} figCap_plotTitle`
:::
