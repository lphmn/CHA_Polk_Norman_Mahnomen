# Health Conditions

```{r}
#| label: gb
#| include: false
# include does not show output or code #| is a special syntax for Quarto 

#When testing and not rendering the report, the if statement returns true but when rendering as the report, the else executes
if (file.exists("pages/Global/gb.R")) {
  source("pages/Global/gb.R")
  source("pages/Data/data.R")
} else {
  source("./Global/gb.R")
  source("./Data/data.R")
}
```

Addressing chronic health conditions is crucial for improving the overall well-being of our communities. Heart disease, cancer, sexually transmitted infections (STIs) including HIV, obesity, and diabetes are among the most significant health challenges we face today. These conditions not only impact individual health but also place a substantial burden on healthcare systems and society as a whole. Health conditions related to a mental health related condition(s) are not discussed in the mental health section.

Heart disease and cancer are the leading causes of death in Minnesota. Cancer, with its various forms, continues to affect many lives, highlighting the importance of early detection and treatment. STIs, including HIV, pose serious health risks and require comprehensive education and prevention strategies.

Obesity is a growing concern, contributing to numerous other health issues such as diabetes and heart disease. Diabetes itself is a major public health challenge, with both type 1 and type 2 diabetes requiring effective management to prevent complications.

By focusing on these key health conditions, we can develop targeted interventions and support systems to improve health outcomes and enhance the quality of life for individuals in our communities.

## Heart Disease

Heart disease is a health concern that impacts our communities. The age-adjusted number of deaths per 100,000 residents due to heart disease from 2018 to 2022 varies across different locations. Mahnomen County has the highest rate at 196 deaths per 100,000 residents, which is notably higher than the state average for Minnesota at 121 deaths per 100,000 residents. Polk and Norman counties also report elevated rates, with 153 and 160 deaths per 100,000 residents, respectively.

| Location  | Heart Disease |
|:---------:|:-------------:|
| Minnesota |      121      |
|   Polk    |      153      |
|  Norman   |      160      |
| Mahnomen  |      196      |

: Age Adjusted Number of Deaths per 100,000 due to Heart Disease (2018-2022)

@mdhHeartDisease

## Cancer

Cancer remains a significant public health challenge, affecting many individuals and communities. As of January 1, 2021, an estimated 316,110 Minnesota residents were living with a history of malignant cancer, representing 5.5% of the state's population. In our local counties, the prevalence is even higher. Polk County has 1,880 individuals (6.1% of the population) living with a history of cancer, Norman County has 470 individuals (7.3%), and Mahnomen County has 370 individuals (6.9%).

These statistics highlight the widespread impact of cancer and the importance of ongoing support and resources for those affected. Additionally, the age-adjusted rates of specific cancers, such as lung and breast cancer, provide further insight into the burden of this disease. For example, Mahnomen County has the highest age-adjusted rate of lung cancer at 62.7 per 100,000 people, while Polk County has the highest rate of breast cancer at 146.3 per 100,000 people.

By understanding the prevalence and impact of cancer in our communities, we can better tailor our efforts to support those affected and work towards reducing the incidence and mortality associated with this disease.

+-----------+-----------------------------+------------------------------+
| Location  | Number of Persons Living    | Percent of Population Living |
|           |                             |                              |
|           | with a History of of Cancer | with a History of Cancer     |
+:=========:+:===========================:+:============================:+
| Minnesota | 3,16,110                    | 5.5%                         |
+-----------+-----------------------------+------------------------------+
| Polk      | 1,880                       | 6.1%                         |
+-----------+-----------------------------+------------------------------+
| Norman    | 470                         | 7.3%                         |
+-----------+-----------------------------+------------------------------+
| Mahnomen  | 370                         | 6.9%                         |
+-----------+-----------------------------+------------------------------+

: Persons living with a history of of cancer by Location

@mdhCancerPrevalence

| Location  | Lung Cancer | Breast Cancer |
|:---------:|:-----------:|:-------------:|
| Minnesota |     52      |      136      |
|   Polk    |    57.8     |     146.3     |
|  Norman   |    49.3     |     109.2     |
| Mahnomen  |    62.7     |     133.7     |

: Cancer Age Adjusted Rate per 100,000 people 2015-2019

@mdhCancerMap

## Dementia

Dementia is a growing public health concern, particularly among older adults. In Minnesota, 11.9% of beneficiaries are living with dementia. This prevalence is slightly higher in Polk and Norman counties, where 12% of beneficiaries are affected. Mahnomen County has a slightly lower rate at 11.5%. These percentages highlight the impact of dementia on our communities. Addressing the needs of individuals with dementia and their caregivers is crucial for improving quality of life and providing adequate support. By focusing on early detection, effective management, and community resources, we can better support those affected by dementia and work towards reducing its burden.

| Location  | Percent of Beneficiaries with Dementia |
|:---------:|:--------------------------------------:|
| Minnesota |                 11.9%                  |
|   Polk    |                  12%                   |
|  Norman   |                  12%                   |
| Mahnomen  |                 11.5%                  |

: Prevalence of Dementia

@norcDementia

## Diabetes

The age-adjusted prevalence for diabetes is similar between Minnesota, Norman, and Polk. However, Mahnomen does have a higher prevalence of diabetes than Polk County and Norman County. The hope would be that all three counties would be doing reasonably well in the optimal diabetic care. However, we are lower compared to Minnesota.

Optimal diabetic care consists of controlling ones blood pressure (less than 140/90 mmHg), maintaining ones HbA1c ( \< 8.0 mg/dL), taking a statin if its tollorated, a non-tobacco user, and being on a daily aspirin if the patient has ischemic vascular disease [@mdhPublicUseFiles2022]. This care is specifically targeted at patients aged 18-75.

Similarly, the pattern observed in obesity among adults mirror those seen in diabetes prevalence. Mahnomen County, in particular, has a higher age-adjusted prevalence of no leisure-time physical activity and obesity compared to the rest of the group.

::: {#fig-conditionDiabetes}
```{r}
#| label: f_places2022Diabetes
#| warning: false
#| include: false

# Filter the data by 'measureid'
filtered_data <- f_places2022 |> 
  dplyr::filter(measureid == "DIABETES") |> 
  dplyr::mutate(#Passed into ggplot (PDF Plot) but displayed in plotly (HMTL Plot)
    toolTipTextHeader1 = "\nLocation: "
    , toolTipTextValue1 = locationname
    , toolTipTextHeader2 = "\nPrevalence: "
    , toolTipTextValue2 = paste0(formattable::comma(data_value,0), " (", formattable::comma(low_confidence_limit,0), "-", formattable::comma(high_confidence_limit,0), ")")
  )

filtered_dataTbl <- filtered_data |> 
    dplyr::arrange(locationid, year) |> 
    dplyr::mutate(prevalenceType = ifelse(datavaluetypeid == "CrdPrv", "Crude", "Age-Adjusted"),
                  tab = ifelse(datavaluetypeid == "CrdPrv", "Crude Prevalence", "Age-Adjusted Prevalence")) |> 
    dplyr::select(prevalenceType, locationname, low_confidence_limit, data_value, high_confidence_limit, tab)
  
figCap_plotTitle <- paste(filtered_data$measure[1], filtered_data$brfssYr[1])
figSubcap <- "Data Source: @cdc2024Places"
plotXCaption <- paste("Data Source:",cdc2024Places) #Since the x axis is passed into plotly, I am defining the x axis for the plot with the data source so when/if people use the plot in their work the data source is referenced ggplot does a a caption argument but it does not pass into plotly. If the caption should be after the legend, then ggplot caption can be used for the pdf version and annotation can be used in plotly, I'll just have to pass an extra argument into the plotly function.


#Table 
colList <- list("Type", "Location", "Low CI", "Prevalence", "High CI") # Using a list accommodates tables with different column lengths.

#Define the plot here so it is only wrote once
p <- gbFun_plotSingleYrPDF(filtered_data, "locationname", "locationid","data_value", "toolTipTextHeader1", 
    "toolTipTextValue1", "toolTipTextHeader2", "toolTipTextValue2", "data_value_type",
    "low_confidence_limit", "high_confidence_limit", figCap_plotTitle, plotXCaption, "Prevalence",
    gbVal_colorScheme, ifelse(knitr::is_html_output(), 10, 12)
    )
```

<div>

::: {.content-visible when-format="html"}
```{r}
#| fig-width: 8
#| fig-height: 5 

if (knitr::is_html_output()) {
# Create the ggplot plot ggplot and then its wrapped within plotly function
gbFun_plotHTML(p, figCap_plotTitle)
}
```

```{r}
#| tbl-width: 8
#| tbl-height: 4
#| warning: false
#| results: asis
if (knitr::is_html_output()) {
  
  split_data <- split(filtered_dataTbl, filtered_dataTbl$tab)
  
# Generate tabset panels
  cat("::: {.panel-tabset}\n")
     for (tab in names(split_data)) {
       cat(sprintf("## %s\n\n", tab))
       
       # Remove the 'tab' column from the current subset of data
       current_data <- split_data[[tab]][, !names(split_data[[tab]]) %in% "tab"]
       
       print(htmltools::tagList(gbFun_tableHTML(current_data, colList, figCap_plotTitle)))
     }
  cat(":::\n")

}
```
:::

::: {.content-visible when-format="pdf" layout="[[1],[1, 1]]"}
```{r}
#| fig-width: 11
#| fig-height: 3
#| warning: false

if (!knitr::is_html_output()) {
# Plots have to be printed
print(p)
}
```

```{r}
#| tbl-width: 4
#| tbl-height: 3
#| warning: false
if (!knitr::is_html_output()) {
  gbFun_tablePDF(filtered_dataTbl |> dplyr::filter(prevalenceType == "Crude") |> dplyr::select(-tab), colList)
}
```

```{r}
#| tbl-width: 4
#| tbl-height: 3
#| warning: false
if (!knitr::is_html_output()) {
  gbFun_tablePDF(filtered_dataTbl |> dplyr::filter(prevalenceType == "Age-Adjusted") |> dplyr::select(-tab), colList)
}
```
:::

`{r} figSubcap`

</div>

`{r} figCap_plotTitle`
:::

::: {#fig-pufOdc}
```{r}
#| label: f_pufOdc
#| warning: false
#| include: false

# Data Wrangling so it can just be referenced in the PDF and HTML output instead of writing it twice

filtered_data <- f_puf |> 
  dplyr::filter(measure == "odc") |> 
  dplyr::mutate(#Passed into ggplot (PDF Plot) but displayed in plotly (HMTL Plot)
    toolTipTextHeader1 = "Year: "
    , toolTipTextValue1 = year
    , toolTipTextHeader2 = "\nLocation: "
    , toolTipTextValue2 = location
    , toolTipTextHeader3 = "\nOptimal Care Rate: "
    , toolTipTextValue3 =  scales::label_number(accuracy = 0.01)(optimal_care_rate)
  )

minYr <- unique(min(filtered_data$year))
maxYr <- unique(max(filtered_data$year))

# Filtering data here handles table variations better and is easier to maintain than filtering in the function.
filtered_dataTbl <- filtered_data |> 
  dplyr::filter(year == maxYr)  |>
  dplyr::arrange(fips, year) |>
  dplyr::mutate(placeholder = scales::label_number(accuracy = 0.01)(optimal_care_rate)) |>   
  dplyr::select(year, location, placeholder) # Ensure fields are ordered as desired.  


figCap_plotTitle <- "Optimal Diabetic Care " 
figSubcap <- "Data Source: @mdhPublicUseFiles2022"
plotXCaption <- paste("Data Source:", mdhPublicUseFiles2022) #Since the x axis is passed into plotly, I am defining the x axis for the plot with the data source so when/if people use the plot in their work the data source is referenced ggplot does a a caption argument but it does not pass into plotly. If the caption should be after the legend, then ggplot caption can be used for the pdf version and annotation can be used in plotly, I'll just have to pass an extra argument into the plotly function.

# Plot
scaleYContinuous =  scales::label_number(accuracy = 0.01)  # Format y-axis values with geography
#Table
colList <- list("Year", "Location", "Optimal Care Rate") # Using a list accommodates tables with different column lengths.


#Define the plot here so it is only wrote once
p <- gbFun_plotTrendPDF(
    filtered_data, "year", "optimal_care_rate", "location", "fips", "toolTipTextHeader1", 
    "toolTipTextValue1", "toolTipTextHeader2", "toolTipTextValue2", "toolTipTextHeader3",
    "toolTipTextValue3", figCap_plotTitle, plotXCaption, "", minYr, maxYr, scaleYContinuous,
    gbVal_colorScheme, gbVal_shapeScheme, ifelse(knitr::is_html_output(), 10, 14)
    )
```

<div>

::: {.content-visible when-format="html"}
```{r}
#| fig-width: 8
#| fig-height: 5
#| warning: false
if (knitr::is_html_output()) {
  # Create the ggplot plot ggplot and then its wrapped within plotly function
  gbFun_plotHTML(p, figCap_plotTitle)
}
```

```{r}
#| tbl-width: 8
#| tbl-height: 4
#| warning: false
if (knitr::is_html_output()) {
  gbFun_tableHTML(filtered_dataTbl, colList, figCap_plotTitle)
}
```
:::

::: {.content-visible when-format="pdf" layout="[[1, 1], [1]]"}
```{r}
#| warning: false
#| fig-width: 9
#| fig-height: 5
if (!knitr::is_html_output()) {
# Plots have to be printed
print(p)
}
```

```{r}
#| warning: false
#| tbl-width: 2
#| tbl-height: 5
if (!knitr::is_html_output()) {
#Tables shouldn't be printed because the HTML table will display
gbFun_tablePDF(filtered_dataTbl, colList)
}
```
:::

`{r} figSubcap`

</div>

`{r} figCap_plotTitle`
:::

## Obesity

Examining obesity is crucial because it is a major risk factor for numerous chronic diseases, including heart disease, diabetes, and certain cancers. Understanding the prevalence of obesity helps in developing targeted interventions to promote healthier lifestyles and prevent these conditions. Additionally, addressing obesity can improve overall quality of life and reduce healthcare costs for individuals and communities.

::: {#fig-conditionObesity}
```{r}
#| label: f_places2022Obesity
#| warning: false
#| include: false

# Filter the data by 'measureid'
filtered_data <- f_places2022 |> 
  dplyr::filter(measureid == "OBESITY") |> 
  dplyr::mutate(#Passed into ggplot (PDF Plot) but displayed in plotly (HMTL Plot)
    toolTipTextHeader1 = "\nLocation: "
    , toolTipTextValue1 = locationname
    , toolTipTextHeader2 = "\nPrevalence: "
    , toolTipTextValue2 = paste0(formattable::comma(data_value,0), " (", formattable::comma(low_confidence_limit,0), "-", formattable::comma(high_confidence_limit,0), ")")
  )

filtered_dataTbl <- filtered_data |> 
    dplyr::arrange(locationid, year) |> 
    dplyr::mutate(prevalenceType = ifelse(datavaluetypeid == "CrdPrv", "Crude", "Age-Adjusted"),
                  tab = ifelse(datavaluetypeid == "CrdPrv", "Crude Prevalence", "Age-Adjusted Prevalence")) |> 
    dplyr::select(prevalenceType, locationname, low_confidence_limit, data_value, high_confidence_limit, tab)
  
figCap_plotTitle <- paste(filtered_data$measure[1], filtered_data$brfssYr[1])
figSubcap <- "Data Source: @cdc2024Places"
plotXCaption <- paste("Data Source:",cdc2024Places) #Since the x axis is passed into plotly, I am defining the x axis for the plot with the data source so when/if people use the plot in their work the data source is referenced ggplot does a a caption argument but it does not pass into plotly. If the caption should be after the legend, then ggplot caption can be used for the pdf version and annotation can be used in plotly, I'll just have to pass an extra argument into the plotly function.


#Table 
colList <- list("Type", "Location", "Low CI", "Prevalence", "High CI") # Using a list accommodates tables with different column lengths.

#Define the plot here so it is only wrote once
p <- gbFun_plotSingleYrPDF(filtered_data, "locationname", "locationid","data_value", "toolTipTextHeader1", 
    "toolTipTextValue1", "toolTipTextHeader2", "toolTipTextValue2", "data_value_type",
    "low_confidence_limit", "high_confidence_limit", figCap_plotTitle, plotXCaption, "Prevalence",
    gbVal_colorScheme, ifelse(knitr::is_html_output(), 10, 12)
    )
```

<div>

::: {.content-visible when-format="html"}
```{r}
#| fig-width: 8
#| fig-height: 5 

if (knitr::is_html_output()) {
# Create the ggplot plot ggplot and then its wrapped within plotly function
gbFun_plotHTML(p, figCap_plotTitle)
}
```

```{r}
#| tbl-width: 8
#| tbl-height: 4
#| warning: false
#| results: asis
if (knitr::is_html_output()) {
  
  split_data <- split(filtered_dataTbl, filtered_dataTbl$tab)
  
# Generate tabset panels
  cat("::: {.panel-tabset}\n")
     for (tab in names(split_data)) {
       cat(sprintf("## %s\n\n", tab))
       
       # Remove the 'tab' column from the current subset of data
       current_data <- split_data[[tab]][, !names(split_data[[tab]]) %in% "tab"]
       
       print(htmltools::tagList(gbFun_tableHTML(current_data, colList, figCap_plotTitle)))
     }
  cat(":::\n")

}
```
:::

::: {.content-visible when-format="pdf" layout="[[1],[1, 1]]"}
```{r}
#| fig-width: 11
#| fig-height: 3
#| warning: false

if (!knitr::is_html_output()) {
# Plots have to be printed
print(p)
}
```

```{r}
#| tbl-width: 4
#| tbl-height: 3
#| warning: false
if (!knitr::is_html_output()) {
  gbFun_tablePDF(filtered_dataTbl |> dplyr::filter(prevalenceType == "Crude") |> dplyr::select(-tab), colList)
}
```

```{r}
#| tbl-width: 4
#| tbl-height: 3
#| warning: false
if (!knitr::is_html_output()) {
  gbFun_tablePDF(filtered_dataTbl |> dplyr::filter(prevalenceType == "Age-Adjusted") |> dplyr::select(-tab), colList)
}
```
:::

`{r} figSubcap`

</div>

`{r} figCap_plotTitle`
:::

## Influenza

Several influenza surveillance methods are used across the state of Minnesota. Data is summarized by influenza season (October -- April), rather than calendar year. Please refer to page 2 Hospital Influenza Cases by Season and page 3 Deaths associated with influenza by season [in this MDD Summery report](https://www.health.state.mn.us/diseases/flu/stats/2022summary.pdf).

## STI/HIV

As we continue to address these behavioral factors, it's also crucial to focus on sexually transmitted infections (STIs) and HIV. These public health concerns require our attention to ensure effective prevention, testing, and treatment strategies. Let's now examine the data on STIs and HIV in our counties to understand their impact and how we can improve health outcomes in this area.

Chlamydia, Gonorrhea, and Syphilis data in this report should only be compared to the county it pertains to since these are counts. What is also difficult with counts even when looking at the impact internally, is counts don't factor in population growth or decline. However, counts do provide us with insight of the actual impact for if someone gets an STI or HIV. Polk County experienced an increase in Chlamydia cases from 2022 to 2023. Norman and Mahnomen nearly had no cases of gonorrhea in 2023. Syphilis, we see a decline in Polk County and an increase in Mahnomen County.

::: {#fig-chlamydia}
```{r}
#| label: f_stiHIVChlamydia
#| warning: false
#| include: false

# Data Wrangling so it can just be referenced in the PDF and HTML output instead of writing it twice

filtered_data <- f_stiHIV |> 
  dplyr::filter(indicator == "Chlamydia Count", fips != 27000) |>  #Count data gets overwhelmed by state |> 
  dplyr::mutate(#Passed into ggplot (PDF Plot) but displayed in plotly (HMTL Plot)
    toolTipTextHeader1 = "Year: "
    , toolTipTextValue1 = year
    , toolTipTextHeader2 = "\nLocation: "
    , toolTipTextValue2 = location
    , toolTipTextHeader3 = "\nChlamydia Cases: "
    , toolTipTextValue3 = scales::label_comma(accuracy = .01)(valueMetric)
  )

minYr <- unique(min(filtered_data$year))
maxYr <- unique(max(filtered_data$year))

# Filtering data here handles table variations better and is easier to maintain than filtering in the function.
filtered_dataTbl <- filtered_data |> 
  dplyr::filter(year == maxYr)  |>
  dplyr::arrange(fips, year) |>
  dplyr::mutate(placeholder = scales::label_comma(accuracy = .01)(valueMetric)) |>   
  dplyr::select(year, location, placeholder) # Ensure fields are ordered as desired.  


figCap_plotTitle <- "Chlamydia Cases"
figSubcap <- "Data Source: @mdhStiStatistics"
plotXCaption <- paste("Data Source:", mdhStiStatistics) #Since the x axis is passed into plotly, I am defining the x axis for the plot with the data source so when/if people use the plot in their work the data source is referenced ggplot does a a caption argument but it does not pass into plotly. If the caption should be after the legend, then ggplot caption can be used for the pdf version and annotation can be used in plotly, I'll just have to pass an extra argument into the plotly function.

# Plot
scaleYContinuous = scales::label_comma()  # Format y-axis values with geography
#Table
colList <- list("Year", "Location", "Chlamydia Cases Count") # Using a list accommodates tables with different column lengths.

#Define the plot here so it is only wrote once
p <- gbFun_plotTrendPDF(
    filtered_data, "year", "valueMetric", "location", "fips", "toolTipTextHeader1", "toolTipTextValue1", 
    "toolTipTextHeader2", "toolTipTextValue2", "toolTipTextHeader3", "toolTipTextValue3", figCap_plotTitle,
    plotXCaption, "", minYr, maxYr, scaleYContinuous,
    gbVal_colorScheme, gbVal_shapeScheme, ifelse(knitr::is_html_output(), 10, 14)
    )
```

<div>

::: {.content-visible when-format="html"}
```{r}
#| fig-width: 8
#| fig-height: 5
#| warning: false
if (knitr::is_html_output()) {
  # Create the ggplot plot ggplot and then its wrapped within plotly function
  gbFun_plotHTML(p, figCap_plotTitle)
}
```

```{r}
#| tbl-width: 8
#| tbl-height: 4
#| warning: false
if (knitr::is_html_output()) {
  gbFun_tableHTML(filtered_dataTbl, colList, figCap_plotTitle)
}
```
:::

::: {.content-visible when-format="pdf" layout="[[1, 1], [1]]"}
```{r}
#| warning: false
#| fig-width: 9
#| fig-height: 5
if (!knitr::is_html_output()) {
# Plots have to be printed
print(p)
}
```

```{r}
#| warning: false
#| tbl-width: 2
#| tbl-height: 5
if (!knitr::is_html_output()) {
#Tables shouldn't be printed because the HTML table will display
gbFun_tablePDF(filtered_dataTbl, colList)
}
```
:::

`{r} figSubcap`

</div>

`{r} figCap_plotTitle`
:::

::: {#fig-gonorrhea}
```{r}
#| label: f_stiHIVGonorrhea
#| warning: false
#| include: false

# Data Wrangling so it can just be referenced in the PDF and HTML output instead of writing it twice

filtered_data <- f_stiHIV |> 
  dplyr::filter(indicator == "Gonorrhea Count", fips != 27000) |>  #Count data gets overwhelmed by state |> 
  dplyr::mutate(#Passed into ggplot (PDF Plot) but displayed in plotly (HMTL Plot)
    toolTipTextHeader1 = "Year: "
    , toolTipTextValue1 = year
    , toolTipTextHeader2 = "\nLocation: "
    , toolTipTextValue2 = location
    , toolTipTextHeader3 = "\nGonorrhea Cases: "
    , toolTipTextValue3 = scales::label_comma(accuracy = .01)(valueMetric)
  )

minYr <- unique(min(filtered_data$year))
maxYr <- unique(max(filtered_data$year))

# Filtering data here handles table variations better and is easier to maintain than filtering in the function.
filtered_dataTbl <- filtered_data |> 
  dplyr::filter(year == maxYr)  |>
  dplyr::arrange(fips, year) |>
  dplyr::mutate(placeholder = scales::label_comma(accuracy = .01)(valueMetric)) |>   
  dplyr::select(year, location, placeholder) # Ensure fields are ordered as desired.  


figCap_plotTitle <- "Gonorrhea Cases"
figSubcap <- "Data Source: @mdhStiStatistics"
plotXCaption <- paste("Data Source:", mdhStiStatistics) #Since the x axis is passed into plotly, I am defining the x axis for the plot with the data source so when/if people use the plot in their work the data source is referenced ggplot does a a caption argument but it does not pass into plotly. If the caption should be after the legend, then ggplot caption can be used for the pdf version and annotation can be used in plotly, I'll just have to pass an extra argument into the plotly function.

# Plot
scaleYContinuous = scales::label_comma()  # Format y-axis values with geography
#Table
colList <- list("Year", "Location", "Gonorrhea Cases Count") # Using a list accommodates tables with different column lengths.

#Define the plot here so it is only wrote once
p <- gbFun_plotTrendPDF(
    filtered_data, "year", "valueMetric", "location", "fips", "toolTipTextHeader1", "toolTipTextValue1", 
    "toolTipTextHeader2", "toolTipTextValue2", "toolTipTextHeader3", "toolTipTextValue3", figCap_plotTitle,
    plotXCaption, "", minYr, maxYr, scaleYContinuous,
    gbVal_colorScheme, gbVal_shapeScheme, ifelse(knitr::is_html_output(), 10, 14)
    )
```

<div>

::: {.content-visible when-format="html"}
```{r}
#| fig-width: 8
#| fig-height: 5
#| warning: false
if (knitr::is_html_output()) {
  # Create the ggplot plot ggplot and then its wrapped within plotly function
  gbFun_plotHTML(p, figCap_plotTitle)
}
```

```{r}
#| tbl-width: 8
#| tbl-height: 4
#| warning: false
if (knitr::is_html_output()) {
  gbFun_tableHTML(filtered_dataTbl, colList, figCap_plotTitle)
}
```
:::

::: {.content-visible when-format="pdf" layout="[[1, 1], [1]]"}
```{r}
#| warning: false
#| fig-width: 9
#| fig-height: 5
if (!knitr::is_html_output()) {
# Plots have to be printed
print(p)
}
```

```{r}
#| warning: false
#| tbl-width: 2
#| tbl-height: 5
if (!knitr::is_html_output()) {
#Tables shouldn't be printed because the HTML table will display
gbFun_tablePDF(filtered_dataTbl, colList)
}
```
:::

`{r} figSubcap`

</div>

`{r} figCap_plotTitle`
:::

::: {#fig-syphilis}
```{r}
#| label: f_stiHIVSyphilis
#| warning: false
#| include: false

# Data Wrangling so it can just be referenced in the PDF and HTML output instead of writing it twice

filtered_data <- f_stiHIV |> 
  dplyr::filter(indicator == "Syphilis Count", fips != 27000) |>  #Count data gets overwhelmed by state |> 
  dplyr::mutate(#Passed into ggplot (PDF Plot) but displayed in plotly (HMTL Plot)
    toolTipTextHeader1 = "Year: "
    , toolTipTextValue1 = year
    , toolTipTextHeader2 = "\nLocation: "
    , toolTipTextValue2 = location
    , toolTipTextHeader3 = "\nSyphilis Cases: "
    , toolTipTextValue3 = scales::label_comma(accuracy = .01)(valueMetric)
  )

minYr <- unique(min(filtered_data$year))
maxYr <- unique(max(filtered_data$year))

# Filtering data here handles table variations better and is easier to maintain than filtering in the function.
filtered_dataTbl <- filtered_data |> 
  dplyr::filter(year == maxYr)  |>
  dplyr::arrange(fips, year) |>
  dplyr::mutate(placeholder = scales::label_comma(accuracy = .01)(valueMetric)) |>   
  dplyr::select(year, location, placeholder) # Ensure fields are ordered as desired.  


figCap_plotTitle <- "Syphilis Cases"
figSubcap <- "Data Source: @mdhStiStatistics"
plotXCaption <- paste("Data Source:", mdhStiStatistics) #Since the x axis is passed into plotly, I am defining the x axis for the plot with the data source so when/if people use the plot in their work the data source is referenced ggplot does a a caption argument but it does not pass into plotly. If the caption should be after the legend, then ggplot caption can be used for the pdf version and annotation can be used in plotly, I'll just have to pass an extra argument into the plotly function.

# Plot
scaleYContinuous = scales::label_comma()  # Format y-axis values with geography
#Table
colList <- list("Year", "Location", "Syphilis Cases Count") # Using a list accommodates tables with different column lengths.

#Define the plot here so it is only wrote once
p <- gbFun_plotTrendPDF(
    filtered_data, "year", "valueMetric", "location", "fips", "toolTipTextHeader1", "toolTipTextValue1", 
    "toolTipTextHeader2", "toolTipTextValue2", "toolTipTextHeader3", "toolTipTextValue3", figCap_plotTitle,
    plotXCaption, "", minYr, maxYr, scaleYContinuous,
    gbVal_colorScheme, gbVal_shapeScheme, ifelse(knitr::is_html_output(), 10, 14)
    )
```

<div>

::: {.content-visible when-format="html"}
```{r}
#| fig-width: 8
#| fig-height: 5
#| warning: false
if (knitr::is_html_output()) {
  # Create the ggplot plot ggplot and then its wrapped within plotly function
  gbFun_plotHTML(p, figCap_plotTitle)
}
```

```{r}
#| tbl-width: 8
#| tbl-height: 4
#| warning: false
if (knitr::is_html_output()) {
  gbFun_tableHTML(filtered_dataTbl, colList, figCap_plotTitle)
}
```
:::

::: {.content-visible when-format="pdf" layout="[[1, 1], [1]]"}
```{r}
#| warning: false
#| fig-width: 9
#| fig-height: 5
if (!knitr::is_html_output()) {
# Plots have to be printed
print(p)
}
```

```{r}
#| warning: false
#| tbl-width: 2
#| tbl-height: 5
if (!knitr::is_html_output()) {
#Tables shouldn't be printed because the HTML table will display
gbFun_tablePDF(filtered_dataTbl, colList)
}
```
:::

`{r} figSubcap`

</div>

`{r} figCap_plotTitle`
:::

::: {#fig-HIVAidsPrevalence}
```{r}
#| label: f_stiHIVHivAidsPrevalence
#| warning: false
#| include: false

# Data Wrangling so it can just be referenced in the PDF and HTML output instead of writing it twice

filtered_data <- f_stiHIV |> 
  dplyr::filter(indicator == "HIV & Aids Prevalence", fips != 27000) |>  #Count data gets overwhelmed by state |> 
  dplyr::mutate(#Passed into ggplot (PDF Plot) but displayed in plotly (HMTL Plot)
    toolTipTextHeader1 = "Year: "
    , toolTipTextValue1 = year
    , toolTipTextHeader2 = "\nLocation: "
    , toolTipTextValue2 = location
    , toolTipTextHeader3 = "\nPrevalence: "
    , toolTipTextValue3 = scales::label_comma(accuracy = .01)(valueMetric)
  )

minYr <- unique(min(filtered_data$year))
maxYr <- unique(max(filtered_data$year))

# Filtering data here handles table variations better and is easier to maintain than filtering in the function.
filtered_dataTbl <- filtered_data |> 
  dplyr::filter(year == maxYr)  |>
  dplyr::arrange(fips, year) |>
  dplyr::mutate(placeholder = scales::label_comma(accuracy = .01)(valueMetric)) |>   
  dplyr::select(year, location, placeholder) # Ensure fields are ordered as desired.  


figCap_plotTitle <- "HIV & Aids Prevalence"
figSubcap <- "Data Source: @mdhStiStatistics"
plotXCaption <- paste("Data Source:", mdhStiStatistics) #Since the x axis is passed into plotly, I am defining the x axis for the plot with the data source so when/if people use the plot in their work the data source is referenced ggplot does a a caption argument but it does not pass into plotly. If the caption should be after the legend, then ggplot caption can be used for the pdf version and annotation can be used in plotly, I'll just have to pass an extra argument into the plotly function.

# Plot
scaleYContinuous = scales::label_comma()  # Format y-axis values with geography
#Table
colList <- list("Year", "Location", "Prevalence") # Using a list accommodates tables with different column lengths.

#Define the plot here so it is only wrote once
p <- gbFun_plotTrendPDF(
    filtered_data, "year", "valueMetric", "location", "fips", "toolTipTextHeader1", "toolTipTextValue1", 
    "toolTipTextHeader2", "toolTipTextValue2", "toolTipTextHeader3", "toolTipTextValue3", figCap_plotTitle,
    plotXCaption, "", minYr, maxYr, scaleYContinuous,
    gbVal_colorScheme, gbVal_shapeScheme, ifelse(knitr::is_html_output(), 10, 14)
    )
```

<div>

::: {.content-visible when-format="html"}
```{r}
#| fig-width: 8
#| fig-height: 5
#| warning: false
if (knitr::is_html_output()) {
  # Create the ggplot plot ggplot and then its wrapped within plotly function
  gbFun_plotHTML(p, figCap_plotTitle)
}
```

```{r}
#| tbl-width: 8
#| tbl-height: 4
#| warning: false
if (knitr::is_html_output()) {
  gbFun_tableHTML(filtered_dataTbl, colList, figCap_plotTitle)
}
```
:::

::: {.content-visible when-format="pdf" layout="[[1, 1], [1]]"}
```{r}
#| warning: false
#| fig-width: 9
#| fig-height: 5
if (!knitr::is_html_output()) {
# Plots have to be printed
print(p)
}
```

```{r}
#| warning: false
#| tbl-width: 2
#| tbl-height: 5
if (!knitr::is_html_output()) {
#Tables shouldn't be printed because the HTML table will display
gbFun_tablePDF(filtered_dataTbl, colList)
}
```
:::

`{r} figSubcap`

</div>

`{r} figCap_plotTitle`
:::

## Asthma

Asthma is a chronic disease of the airways that makes breathing difficult. Asthma causes inflammation or swelling, and a narrowing of the airways making it more difficult to breathe. Irritated cells in the airways make more mucus than usual narrowing the tiny airways. Mucus is a normally a protective, sticky liquid that helps shield your lungs from irritants like dust, bacteria and smoke.

During normal breathing, air flows freely in and out of the lungs. However, during an asthma attack or episode, swelling of the airway's lining increases, muscles surrounding the airways tighten, and thick mucus clogs the tiny airways making it difficult to breathe. Asthma affects people of all ages and while it can start in adulthood, it most often starts during childhood.

Children, teens, and adults now spend up to 90% of their time indoors, and at least 50% of that time is spent in their home. Because of the large amount of time spent indoors, the home environment is an important focus for reducing exposures to triggers of asthma. Triggers of asthma found in the home include allergens such as pet dander, mold, or pests as well as irritants such as scented cleaning products and second hand smoke. @mdhAsthma

| Location  | Age-Adjusted |
|-----------|--------------|
| Minnesota | 29.8         |
| Polk      | 21.3         |
| Norman    | 14.0         |
| Mahnonmen | 42.6         |

: Asthma ED Visit Age-Adjusted Rates for 2019-2021 by County (per 10,000 Residents)

@mdhPHDAPAsthma
