)
, percentageChange = ifelse(is.na(percentageChange), "--", percentageChange)
) |>
dplyr::ungroup() |>
dplyr::select(year, location, vaccine, placeholder, percentageChange) # Ensure fields are ordered as desired.
#split table into two groups for pdf output
filtered_dataTblMM <- filtered_dataTbl |>
dplyr::filter(location %in% c("Minnesota", "Mahnomen"))  # two locations
filtered_dataTblNP <- filtered_dataTbl |>
dplyr::filter(location %in% c("Norman", "Polk")) #split table into two groups with two locations
figCap_plotTitle <- "Percentage of Polk, Norman, Mahnomen County\nChildren Ages 24âˆ’35 Months for DTap, Hep A, Hep B, Hib, & MMR"
figSubcap <- "Data Source: @mdhPHDAPImmuizations"
plotXCaption <- paste("Data Source:",mdhPHDAPImmuizations) #Since the x axis is passed into plotly, I am defining the x axis for the plot with the data source so when/if people use the plot in their work the data source is referenced ggplot does a a caption argument but it does not pass into plotly. If the caption should be after the legend, then ggplot caption can be used for the pdf version and annotation can be used in plotly, I'll just have to pass an extra argument into the plotly function.
filtered_data <- f_pHDAPImmunization |>
dplyr::filter(vaccine %in% c(vaccine %in% c("PCV", "Polio", "Rotavirus", "Varicella"))) |>
dplyr::group_by(location, fips) |>
dplyr::mutate(#Passed into ggplot (PDF Plot) but displayed in plotly (HMTL Plot)
toolTipTextHeader1 = "Year: "
, toolTipTextValue1 = year
, toolTipTextHeader2 = "\nLocation: "
, toolTipTextValue2 = location
, toolTipTextHeader3 = "\nVaccine Percentage: "
, toolTipTextValue3 = scales::label_percent(accuracy= 0.01)(percent)
) |>
dplyr::ungroup()
minYr <- unique(min(filtered_data$year))
maxYr <- unique(max(filtered_data$year))
# Filtering data here handles table variations better and is easier to maintain than filtering in the function.
filtered_dataTbl <- filtered_data |>
dplyr::filter(year >= maxYr-1)  |>
dplyr::arrange(fips, vaccine, year) |>
dplyr::mutate(placeholder = scales::label_percent(accuracy= 0.01)(percent)) |>  #I wanted to use formattable but DT strips format when converted to HTML Table
dplyr::group_by(fips, vaccine) |>
dplyr::mutate(percentageChange = dplyr::case_when(
year == maxYr ~ scales::label_percent(accuracy= 0.01)((percent) - dplyr::first(percent)) #Since there is only 2, most recent - next
, TRUE ~ ""
)
, percentageChange = ifelse(is.na(percentageChange), "--", percentageChange)
) |>
dplyr::ungroup() |>
dplyr::select(year, location, vaccine, placeholder, percentageChange) # Ensure fields are ordered as desired.
#split table into two groups for pdf output
filtered_dataTblMM <- filtered_dataTbl |>
dplyr::filter(location %in% c("Minnesota", "Mahnomen"))  # two locations
filtered_dataTblNP <- filtered_dataTbl |>
dplyr::filter(location %in% c("Norman", "Polk")) #split table into two groups with two locations
library(gitcreds)
gitcreds_set()
test <- readxl::read_xlsx("https://www.health.state.mn.us/data/apcd/publicusefiles/docs/diagnoses2021.xlsx")
test <- openxlsx::read.xlsx("https://www.health.state.mn.us/data/apcd/publicusefiles/docs/diagnoses2021.xlsx")
View(test)
test <- openxlsx::read.xlsx("https://www.health.state.mn.us/data/apcd/publicusefiles/docs/diagnoses2021.xlsx", sheet = 2)
test <- openxlsx::read.xlsx("https://www.health.state.mn.us/data/apcd/publicusefiles/docs/diagnoses2021.xlsx", sheet = 5)
test <- openxlsx::read.xlsx("https://www.health.state.mn.us/data/apcd/publicusefiles/docs/diagnoses2021.xlsx", sheet = 4)
View(test)
#| label: gb
#| include: false
# include does not show output or code #| is a special syntax for Quarto
#When testing and not rendering the report, the if statement returns true but when rendering as the report, the else executes
if (file.exists("pages/Global/gb.R")) {
source("pages/Global/gb.R")
source("pages/Data/data.R")
} else {
source("./Global/gb.R")
source("./Data/data.R")
}
#| label: f_places2022GeneralHealth
#| warning: false
#| include: false
# Filter the data by 'measureid'
filtered_data <- f_places2022 |>
dplyr::filter(measureid == "GHLTH") |>
dplyr::mutate(#Passed into ggplot (PDF Plot) but displayed in plotly (HMTL Plot)
toolTipTextHeader1 = "\nLocation: "
, toolTipTextValue1 = locationname
, toolTipTextHeader2 = "\nPrevalence: "
, toolTipTextValue2 = paste0(formattable::comma(data_value,0), " (", formattable::comma(low_confidence_limit,0), "-", formattable::comma(high_confidence_limit,0), ")")
)
filtered_dataTbl <- filtered_data |>
dplyr::arrange(locationid, year) |>
dplyr::mutate(prevalenceType = ifelse(datavaluetypeid == "CrdPrv", "Crude Prevalence", "Age-Adjusted Prevalence")) |>
dplyr::select(prevalenceType, locationname, low_confidence_limit, data_value, high_confidence_limit)
filtered_ageAdjustedTbl <- filtered_data |>
dplyr::filter(datavaluetypeid == "AgeAdjPrv") |>
dplyr::arrange(locationid, year) |>
dplyr::mutate(PrevalenceType = "Age-Adjusted") |>
dplyr::select(PrevalenceType, locationname, low_confidence_limit, data_value, high_confidence_limit)
filtered_crudeTbl <- filtered_data |>
dplyr::filter(datavaluetypeid == "CrdPrv") |>
dplyr::arrange(locationid, year) |>
dplyr::mutate(PrevalenceType = "Crude") |>
dplyr::select(PrevalenceType, locationname, low_confidence_limit, data_value, high_confidence_limit)
figCap_plotTitle <- paste(filtered_data$measure[1], filtered_data$brfssYr[1])
figSubcap <- "Data Source: @cdc2024Places"
plotXCaption <- paste("Data Source:",cdc2024Places) #Since the x axis is passed into plotly, I am defining the x axis for the plot with the data source so when/if people use the plot in their work the data source is referenced ggplot does a a caption argument but it does not pass into plotly. If the caption should be after the legend, then ggplot caption can be used for the pdf version and annotation can be used in plotly, I'll just have to pass an extra argument into the plotly function.
#Table
colList <- list("Type", "Location", "Low CI", "Prevalence", "High CI") # Using a list accommodates tables with different column lengths.
#Define the plot here so it is only wrote once
p <- gbFun_plotSingleYrPDF(filtered_data, "locationname", "locationid","data_value", "toolTipTextHeader1",
"toolTipTextValue1", "toolTipTextHeader2", "toolTipTextValue2", "data_value_type",
"low_confidence_limit", "high_confidence_limit", figCap_plotTitle, plotXCaption, "Prevalence",
gbVal_colorScheme, ifelse(knitr::is_html_output(), 10, 12)
)
#| tbl-width: 8
#| tbl-height: 4
#| warning: false
#| results: asis
if (knitr::is_html_output()) {
split_data <- split(filtered_dataTbl, filtered_dataTbl$prevalenceType)
# Generate tabset panels
cat("::: {.panel-tabset}\n")
for (vaccine in names(split_data)) {
cat(sprintf("## %s\n\n", prevalenceType))
print(htmltools::tagList(gbFun_tableHTML(split_data[[prevalenceType]], colList, figCap_plotTitle)))
}
cat(":::\n")
}
split_data <- split(filtered_dataTbl, filtered_dataTbl$prevalenceType)
# Generate tabset panels
cat("::: {.panel-tabset}\n")
for (vaccine in names(split_data)) {
cat(sprintf("## %s\n\n", prevalenceType))
print(htmltools::tagList(gbFun_tableHTML(split_data[[prevalenceType]], colList, figCap_plotTitle)))
}
#| label: f_places2022GeneralHealth
#| warning: false
#| include: false
# Filter the data by 'measureid'
filtered_data <- f_places2022 |>
dplyr::filter(measureid == "GHLTH") |>
dplyr::mutate(#Passed into ggplot (PDF Plot) but displayed in plotly (HMTL Plot)
toolTipTextHeader1 = "\nLocation: "
, toolTipTextValue1 = locationname
, toolTipTextHeader2 = "\nPrevalence: "
, toolTipTextValue2 = paste0(formattable::comma(data_value,0), " (", formattable::comma(low_confidence_limit,0), "-", formattable::comma(high_confidence_limit,0), ")")
)
filtered_dataTbl <- filtered_data |>
dplyr::arrange(locationid, year) |>
dplyr::mutate(prevalenceType = ifelse(datavaluetypeid == "CrdPrv", "Crude", "Age-Adjusted"),
tab = ifelse(datavaluetypeid == "CrdPrv", "Crude Prevalence", "Age-Adjusted Prevalence")) |>
dplyr::select(prevalenceType, locationname, low_confidence_limit, data_value, high_confidence_limit, tab)
figCap_plotTitle <- paste(filtered_data$measure[1], filtered_data$brfssYr[1])
figSubcap <- "Data Source: @cdc2024Places"
plotXCaption <- paste("Data Source:",cdc2024Places) #Since the x axis is passed into plotly, I am defining the x axis for the plot with the data source so when/if people use the plot in their work the data source is referenced ggplot does a a caption argument but it does not pass into plotly. If the caption should be after the legend, then ggplot caption can be used for the pdf version and annotation can be used in plotly, I'll just have to pass an extra argument into the plotly function.
#Table
colList <- list("Type", "Location", "Low CI", "Prevalence", "High CI") # Using a list accommodates tables with different column lengths.
#Define the plot here so it is only wrote once
p <- gbFun_plotSingleYrPDF(filtered_data, "locationname", "locationid","data_value", "toolTipTextHeader1",
"toolTipTextValue1", "toolTipTextHeader2", "toolTipTextValue2", "data_value_type",
"low_confidence_limit", "high_confidence_limit", figCap_plotTitle, plotXCaption, "Prevalence",
gbVal_colorScheme, ifelse(knitr::is_html_output(), 10, 12)
)
filtered_dataTbl <- filtered_dataTbl |> dplyr::mutate(prevalenceType == "Crude") |> dplyr::select(-tab)
View(filtered_data)
filtered_dataTbl <- filtered_data |>
dplyr::arrange(locationid, year) |>
dplyr::mutate(prevalenceType = ifelse(datavaluetypeid == "CrdPrv", "Crude", "Age-Adjusted"),
tab = ifelse(datavaluetypeid == "CrdPrv", "Crude Prevalence", "Age-Adjusted Prevalence")) |>
dplyr::select(prevalenceType, locationname, low_confidence_limit, data_value, high_confidence_limit, tab)
View(filtered_dataTbl)
filtered_dataTbl <- filtered_dataTbl |> dplyr::mutate(prevalenceType == "Age-Adjusted") |> dplyr::select(-tab)
View(filtered_dataTbl)
# The percentage of patients 12-17 years of age who were screened for mental health and/or depression
df_publicUseFilesMHScreen18 <- read.csv("https://www.health.state.mn.us/data/hcquality/pufs/docs/amh18countygp.csv") |>
dplyr::select(
FIPS_CODE
, TOTAL_OPTIMAL
, TOTAL_PATIENTS
, OPTIMAL_CARE_RATE
) |>
dplyr::mutate(year = 2018, measure = "aesm") #aesm stands for adolescent mental health and/or depression screening
df_publicUseFilesMHScreen19 <- read.csv("https://www.health.state.mn.us/data/hcquality/pufs/docs/amh19countygp.csv") |>
dplyr::select(
FIPS_CODE
, TOTAL_OPTIMAL
, TOTAL_PATIENTS
, OPTIMAL_CARE_RATE
) |>
dplyr::mutate(year = 2019, measure = "aesm")
df_publicUseFilesMHScreen20 <- read.csv("https://www.health.state.mn.us/data/hcquality/pufs/docs/amh20countygp.csv") |>
dplyr::select(
FIPS_CODE
, TOTAL_OPTIMAL
, TOTAL_PATIENTS
, OPTIMAL_CARE_RATE
) |>
dplyr::mutate(year = 2020, measure = "aesm")
df_publicUseFilesMHScreen21 <- read.csv("https://www.health.state.mn.us/data/hcquality/pufs/docs/amh21countygp.csv") |>
dplyr::select(
FIPS_CODE
, TOTAL_OPTIMAL
, TOTAL_PATIENTS
, OPTIMAL_CARE_RATE
) |>
dplyr::mutate(year = 2021, measure = "aesm")
df_publicUseFilesMHScreen22 <- read.csv("https://www.health.state.mn.us/data/hcquality/pufs/docs/amh22countygp.csv") |>
dplyr::select(
FIPS_CODE
, TOTAL_OPTIMAL
, TOTAL_PATIENTS
, OPTIMAL_CARE_RATE
) |>
dplyr::mutate(year = 2022, measure = "aesm")
df_publicUseFilesDiabetes18 <- read.csv("https://www.health.state.mn.us/data/hcquality/pufs/docs/odc18countygp.csv") |>
dplyr::select(
FIPS_CODE
, TOTAL_OPTIMAL
, TOTAL_PATIENTS
, OPTIMAL_CARE_RATE
) |>
dplyr::mutate(year = 2018, measure = "odc")  #oac stands for optimal asthma control
df_publicUseFilesDiabetes19 <- read.csv("https://www.health.state.mn.us/data/hcquality/pufs/docs/odc19countygp.csv") |>
dplyr::select(
FIPS_CODE
, TOTAL_OPTIMAL
, TOTAL_PATIENTS
, OPTIMAL_CARE_RATE
) |>
dplyr::mutate(year = 2019, measure = "odc")
df_publicUseFilesDiabetes20 <- read.csv("https://www.health.state.mn.us/data/hcquality/pufs/docs/odc20countygp.csv") |>
dplyr::select(
FIPS_CODE
, TOTAL_OPTIMAL
, TOTAL_PATIENTS
, OPTIMAL_CARE_RATE
) |>
dplyr::mutate(year = 2020, measure = "odc")
df_publicUseFilesDiabetes21 <- read.csv("https://www.health.state.mn.us/data/hcquality/pufs/docs/odc21countygp.csv") |>
dplyr::select(
FIPS_CODE
, TOTAL_OPTIMAL
, TOTAL_PATIENTS
, OPTIMAL_CARE_RATE
) |>
dplyr::mutate(year = 2021, measure = "odc")
df_publicUseFilesDiabetes22 <- read.csv("https://www.health.state.mn.us/data/hcquality/pufs/docs/odc22countygp.csv") |>
dplyr::select(
FIPS_CODE
, TOTAL_OPTIMAL
, TOTAL_PATIENTS
, OPTIMAL_CARE_RATE
) |>
dplyr::mutate(year = 2022, measure = "odc")
f_puf <- df_publicUseFilesMHScreen18 |> dplyr::bind_rows(df_publicUseFilesMHScreen19) |>
dplyr::bind_rows( df_publicUseFilesMHScreen20) |>  dplyr::bind_rows( df_publicUseFilesMHScreen21) |> dplyr::bind_rows( df_publicUseFilesMHScreen22) |>
dplyr::bind_rows( df_publicUseFilesDiabetes18) |> dplyr::bind_rows( df_publicUseFilesDiabetes19) |> dplyr::bind_rows( df_publicUseFilesDiabetes20) |>
dplyr::bind_rows( df_publicUseFilesDiabetes21) |> dplyr::bind_rows( df_publicUseFilesDiabetes22)
View(f_puf)
df_publicUseFilesDiabetes21 <- read.csv("https://www.health.state.mn.us/data/hcquality/pufs/docs/odc21countygp.csv")
df_publicUseFilesDiabetes21 <- read.csv("https://www.health.state.mn.us/data/hcquality/pufs/docs/odc21countygp.csv")
View(df_publicUseFilesDiabetes21)
# The percentage of patients 12-17 years of age who were screened for mental health and/or depression
df_publicUseFilesMHScreen18 <- read.csv("https://www.health.state.mn.us/data/hcquality/pufs/docs/amh18countygp.csv") |>
dplyr::select(
FIPS_CODE
, COUNTY_NAME
, TOTAL_OPTIMAL
, TOTAL_PATIENTS
, OPTIMAL_CARE_RATE
) |>
dplyr::mutate(year = 2018, measure = "aesm") #aesm stands for adolescent mental health and/or depression screening
df_publicUseFilesMHScreen19 <- read.csv("https://www.health.state.mn.us/data/hcquality/pufs/docs/amh19countygp.csv") |>
dplyr::select(
FIPS_CODE
, COUNTY_NAME
, TOTAL_OPTIMAL
, TOTAL_PATIENTS
, OPTIMAL_CARE_RATE
) |>
dplyr::mutate(year = 2019, measure = "aesm")
df_publicUseFilesMHScreen20 <- read.csv("https://www.health.state.mn.us/data/hcquality/pufs/docs/amh20countygp.csv") |>
dplyr::select(
FIPS_CODE
, COUNTY_NAME
, TOTAL_OPTIMAL
, TOTAL_PATIENTS
, OPTIMAL_CARE_RATE
) |>
dplyr::mutate(year = 2020, measure = "aesm")
df_publicUseFilesMHScreen21 <- read.csv("https://www.health.state.mn.us/data/hcquality/pufs/docs/amh21countygp.csv") |>
dplyr::select(
FIPS_CODE
, COUNTY_NAME
, TOTAL_OPTIMAL
, TOTAL_PATIENTS
, OPTIMAL_CARE_RATE
) |>
dplyr::mutate(year = 2021, measure = "aesm")
df_publicUseFilesMHScreen22 <- read.csv("https://www.health.state.mn.us/data/hcquality/pufs/docs/amh22countygp.csv") |>
dplyr::select(
FIPS_CODE
, COUNTY_NAME
, TOTAL_OPTIMAL
, TOTAL_PATIENTS
, OPTIMAL_CARE_RATE
) |>
dplyr::mutate(year = 2022, measure = "aesm")
df_publicUseFilesDiabetes18 <- read.csv("https://www.health.state.mn.us/data/hcquality/pufs/docs/odc18countygp.csv") |>
dplyr::select(
FIPS_CODE
, COUNTY_NAME
, TOTAL_OPTIMAL
, TOTAL_PATIENTS
, OPTIMAL_CARE_RATE
) |>
dplyr::mutate(year = 2018, measure = "odc")  #oac stands for optimal asthma control
df_publicUseFilesDiabetes19 <- read.csv("https://www.health.state.mn.us/data/hcquality/pufs/docs/odc19countygp.csv") |>
dplyr::select(
FIPS_CODE
, COUNTY_NAME
, TOTAL_OPTIMAL
, TOTAL_PATIENTS
, OPTIMAL_CARE_RATE
) |>
dplyr::mutate(year = 2019, measure = "odc")
df_publicUseFilesDiabetes20 <- read.csv("https://www.health.state.mn.us/data/hcquality/pufs/docs/odc20countygp.csv") |>
dplyr::select(
FIPS_CODE
, COUNTY_NAME
, TOTAL_OPTIMAL
, TOTAL_PATIENTS
, OPTIMAL_CARE_RATE
) |>
dplyr::mutate(year = 2020, measure = "odc")
df_publicUseFilesDiabetes21 <- read.csv("https://www.health.state.mn.us/data/hcquality/pufs/docs/odc21countygp.csv")
df_publicUseFilesDiabetes21 <- read.csv("https://www.health.state.mn.us/data/hcquality/pufs/docs/odc21countygp.csv")  |>
dplyr::select(
FIPS_CODE
, COUNTY_NAME
, TOTAL_OPTIMAL
, TOTAL_PATIENTS
, OPTIMAL_CARE_RATE
) |>
dplyr::mutate(year = 2021, measure = "odc")
df_publicUseFilesDiabetes22 <- read.csv("https://www.health.state.mn.us/data/hcquality/pufs/docs/odc22countygp.csv") |>
dplyr::select(
FIPS_CODE
, COUNTY_NAME
, TOTAL_OPTIMAL
, TOTAL_PATIENTS
, OPTIMAL_CARE_RATE
) |>
dplyr::mutate(year = 2022, measure = "odc")
f_puf <- df_publicUseFilesMHScreen18 |> dplyr::bind_rows(df_publicUseFilesMHScreen19) |>
dplyr::bind_rows( df_publicUseFilesMHScreen20) |>  dplyr::bind_rows( df_publicUseFilesMHScreen21) |> dplyr::bind_rows( df_publicUseFilesMHScreen22) |>
dplyr::bind_rows( df_publicUseFilesDiabetes18) |> dplyr::bind_rows( df_publicUseFilesDiabetes19) |> dplyr::bind_rows( df_publicUseFilesDiabetes20) |>
dplyr::bind_rows( df_publicUseFilesDiabetes21) |> dplyr::bind_rows( df_publicUseFilesDiabetes22)
View(f_puf)
#| label: gb
#| include: false
# include does not show output or code #| is a special syntax for Quarto
#When testing and not rendering the report, the if statement returns true but when rendering as the report, the else executes
if (file.exists("pages/Global/gb.R")) {
source("pages/Global/gb.R")
source("pages/Data/data.R")
} else {
source("./Global/gb.R")
source("./Data/data.R")
}
filtered_data <- f_kidsCountMotherPnc |>
dplyr::filter(year > 2017, year >= max(year) -5) |>  #PNC measure change at 2017
dplyr::group_by(location, fips) |>
dplyr::mutate(#Passed into ggplot (PDF Plot) but displayed in plotly (HMTL Plot)
toolTipTextHeader1 = "Year: "
, toolTipTextValue1 = year
, toolTipTextHeader2 = "\nLocation: "
, toolTipTextValue2 = location
, toolTipTextHeader3 = "\nLate/Inadequate Prenatal Care: "
, toolTipTextValue3 = scales::label_percent(accuracy= 0.01)(data)
) |>
dplyr::ungroup()
#| label: f_kidsCountMotherPnc
#| warning: false
#| include: false
# Data Wrangling so it can just be referenced in the PDF and HTML output instead of writing it twice
filtered_data <- f_kidsCountMotherPnc |>
dplyr::filter(year > 2017, year >= max(year) -5) |>  #PNC measure change at 2017
dplyr::group_by(location, fips) |>
dplyr::mutate(#Passed into ggplot (PDF Plot) but displayed in plotly (HMTL Plot)
toolTipTextHeader1 = "Year: "
, toolTipTextValue1 = year
, toolTipTextHeader2 = "\nLocation: "
, toolTipTextValue2 = location
, toolTipTextHeader3 = "\nLate/Inadequate Prenatal Care: "
, toolTipTextValue3 = scales::label_percent(accuracy= 0.01)(data)
) |>
dplyr::ungroup()
minYr <- unique(min(filtered_data$year))
maxYr <- unique(max(filtered_data$year))
# Filtering data here handles table variations better and is easier to maintain than filtering in the function.
filtered_dataTbl <- filtered_data |>
dplyr::filter(year >= maxYr-1)  |>
dplyr::arrange(fips, year) |>
dplyr::mutate(placeholder = scales::label_percent(accuracy= 0.01)(data)) |>  #I wanted to use formattable but DT strips format when converted to HTML Table
dplyr::group_by(fips) |>
dplyr::mutate(percentageChange = dplyr::case_when(
year == maxYr ~ scales::label_percent(accuracy= 0.01)((data) - dplyr::first(data)) #Since there is only 2, most recent - next
, TRUE ~ ""
)
, percentageChange = ifelse(is.na(percentageChange), "--", percentageChange)
) |>
dplyr::ungroup() |>
dplyr::select(year, location, placeholder, percentageChange) # Ensure fields are ordered as desired.
figCap_plotTitle <- "Late/Inadequate Prenatal Care (PNC) for Mothers"
figSubcap <- "Data Source: @kidsCountPreNatalCare"
plotXCaption <- paste("Data Source:",kidsCountPreNatalCare) #Since the x axis is passed into plotly, I am defining the x axis for the plot with the data source so when/if people use the plot in their work the data source is referenced ggplot does a a caption argument but it does not pass into plotly. If the caption should be after the legend, then ggplot caption can be used for the pdf version and annotation can be used in plotly, I'll just have to pass an extra argument into the plotly function.
# Plot
scaleYContinuous = scales::label_percent()  # Format y-axis values with geography
#Table
colList <- list("Year", "Location", "Late/Inadequate PNC", "% Change") # Using a list accommodates tables with different column lengths.
#Define the plot here so it is only wrote once
p <- gbFun_plotTrendPDF(
filtered_data, "year", "data", "location", "fips", "toolTipTextHeader1", "toolTipTextValue1",
"toolTipTextHeader2", "toolTipTextValue2", "toolTipTextHeader3", "toolTipTextValue3",
figCap_plotTitle, plotXCaption, "Late/Inadequate PNC",minYr, maxYr, scaleYContinuous, gbVal_colorScheme,
gbVal_shapeScheme, ifelse(knitr::is_html_output(), 10, 14)
)
#| label: gb
#| include: false
# include does not show output or code #| is a special syntax for Quarto
#When testing and not rendering the report, the if statement returns true but when rendering as the report, the else executes
if (file.exists("pages/Global/gb.R")) {
source("pages/Global/gb.R")
source("pages/Data/data.R")
} else {
source("./Global/gb.R")
source("./Data/data.R")
}
#| label: gb
#| include: false
# include does not show output or code #| is a special syntax for Quarto
#When testing and not rendering the report, the if statement returns true but when rendering as the report, the else executes
if (file.exists("pages/Global/gb.R")) {
source("pages/Global/gb.R")
source("pages/Data/data.R")
} else {
source("./Global/gb.R")
source("./Data/data.R")
}
#| label: gb
#| include: false
# include does not show output or code #| is a special syntax for Quarto
#When testing and not rendering the report, the if statement returns true but when rendering as the report, the else executes
if (file.exists("pages/Global/gb.R")) {
source("pages/Global/gb.R")
source("pages/Data/data.R")
} else {
source("./Global/gb.R")
source("./Data/data.R")
}
#| label: f_kidsCountMotherPnc
#| warning: false
#| include: false
# Data Wrangling so it can just be referenced in the PDF and HTML output instead of writing it twice
filtered_data <- f_kidsCountMotherPnc |>
dplyr::filter(year > 2017, year >= max(year) -5) |>  #PNC measure change at 2017
dplyr::group_by(location, fips) |>
dplyr::mutate(#Passed into ggplot (PDF Plot) but displayed in plotly (HMTL Plot)
toolTipTextHeader1 = "Year: "
, toolTipTextValue1 = year
, toolTipTextHeader2 = "\nLocation: "
, toolTipTextValue2 = location
, toolTipTextHeader3 = "\nLate/Inadequate Prenatal Care: "
, toolTipTextValue3 = scales::label_percent(accuracy= 0.01)(data)
) |>
dplyr::ungroup()
minYr <- unique(min(filtered_data$year))
maxYr <- unique(max(filtered_data$year))
# Filtering data here handles table variations better and is easier to maintain than filtering in the function.
filtered_dataTbl <- filtered_data |>
dplyr::filter(year >= maxYr-1)  |>
dplyr::arrange(fips, year) |>
dplyr::mutate(placeholder = scales::label_percent(accuracy= 0.01)(data)) |>  #I wanted to use formattable but DT strips format when converted to HTML Table
dplyr::group_by(fips) |>
dplyr::mutate(percentageChange = dplyr::case_when(
year == maxYr ~ scales::label_percent(accuracy= 0.01)((data) - dplyr::first(data)) #Since there is only 2, most recent - next
, TRUE ~ ""
)
, percentageChange = ifelse(is.na(percentageChange), "--", percentageChange)
) |>
dplyr::ungroup() |>
dplyr::select(year, location, placeholder, percentageChange) # Ensure fields are ordered as desired.
figCap_plotTitle <- "Late/Inadequate Prenatal Care (PNC) for Mothers"
figSubcap <- "Data Source: @kidsCountPreNatalCare"
plotXCaption <- paste("Data Source:",kidsCountPreNatalCare) #Since the x axis is passed into plotly, I am defining the x axis for the plot with the data source so when/if people use the plot in their work the data source is referenced ggplot does a a caption argument but it does not pass into plotly. If the caption should be after the legend, then ggplot caption can be used for the pdf version and annotation can be used in plotly, I'll just have to pass an extra argument into the plotly function.
# Plot
scaleYContinuous = scales::label_percent()  # Format y-axis values with geography
#Table
colList <- list("Year", "Location", "Late/Inadequate PNC", "% Change") # Using a list accommodates tables with different column lengths.
#Define the plot here so it is only wrote once
p <- gbFun_plotTrendPDF(
filtered_data, "year", "data", "location", "fips", "toolTipTextHeader1", "toolTipTextValue1",
"toolTipTextHeader2", "toolTipTextValue2", "toolTipTextHeader3", "toolTipTextValue3",
figCap_plotTitle, plotXCaption, "Late/Inadequate PNC",minYr, maxYr, scaleYContinuous, gbVal_colorScheme,
gbVal_shapeScheme, ifelse(knitr::is_html_output(), 10, 14)
)
f_wicBreastFeeding <- if (file.exists("pages/Data/f_wicBreastFeeding.csv")) {
read.csv("pages/Data/f_wicBreastFeeding.csv")
} else {
read.csv("./Data/f_wicBreastFeeding.csv")
}
f_kidsCountMotherPnc <- if (file.exists("pages/Data/f_kidsCountMotherPnc.csv")) {
read.csv("pages/Data/f_kidsCountMotherPnc.csv")
} else {
read.csv("./Data/f_kidsCountMotherPnc.csv")
}
View(f_kidsCountMotherPnc)
gitcreds_set()
library(gitcreds)
gitcreds_set()
library(gitcreds)
gitcreds_set()
