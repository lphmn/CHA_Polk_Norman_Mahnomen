dplyr::mutate(year = 2019, measure = "odc")
df_publicUseFilesDiabetes20 <- read.csv("https://www.health.state.mn.us/data/hcquality/pufs/docs/odc20countygp.csv") |>
dplyr::select(
FIPS_CODE
, TOTAL_OPTIMAL
, TOTAL_PATIENTS
, OPTIMAL_CARE_RATE
) |>
dplyr::mutate(year = 2020, measure = "odc")
df_publicUseFilesDiabetes21 <- read.csv("https://www.health.state.mn.us/data/hcquality/pufs/docs/odc21countygp.csv") |>
dplyr::select(
FIPS_CODE
, TOTAL_OPTIMAL
, TOTAL_PATIENTS
, OPTIMAL_CARE_RATE
) |>
dplyr::mutate(year = 2021, measure = "odc")
df_publicUseFilesDiabetes22 <- read.csv("https://www.health.state.mn.us/data/hcquality/pufs/docs/odc22countygp.csv") |>
dplyr::select(
FIPS_CODE
, TOTAL_OPTIMAL
, TOTAL_PATIENTS
, OPTIMAL_CARE_RATE
) |>
dplyr::mutate(year = 2022, measure = "odc")
# The percentage of patients 12-17 years of age who were screened for mental health and/or depression
df_publicUseFilesMHScreen18 <- read.csv("https://www.health.state.mn.us/data/hcquality/pufs/docs/amh18countygp.csv") |>
dplyr::select(
FIPS_CODE
, TOTAL_OPTIMAL
, TOTAL_PATIENTS
, OPTIMAL_CARE_RATE
) |>
dplyr::mutate(year = 2018, measure = "aesm") #aesm stands for adolescent mental health and/or depression screening
df_publicUseFilesMHScreen19 <- read.csv("https://www.health.state.mn.us/data/hcquality/pufs/docs/amh19countygp.csv") |>
dplyr::select(
FIPS_CODE
, TOTAL_OPTIMAL
, TOTAL_PATIENTS
, OPTIMAL_CARE_RATE
) |>
dplyr::mutate(year = 2019, measure = "aesm")
df_publicUseFilesMHScreen20 <- read.csv("https://www.health.state.mn.us/data/hcquality/pufs/docs/amh20countygp.csv") |>
dplyr::select(
FIPS_CODE
, TOTAL_OPTIMAL
, TOTAL_PATIENTS
, OPTIMAL_CARE_RATE
) |>
dplyr::mutate(year = 2020, measure = "aesm")
df_publicUseFilesMHScreen21 <- read.csv("https://www.health.state.mn.us/data/hcquality/pufs/docs/amh21countygp.csv") |>
dplyr::select(
FIPS_CODE
, TOTAL_OPTIMAL
, TOTAL_PATIENTS
, OPTIMAL_CARE_RATE
) |>
dplyr::mutate(year = 2021, measure = "aesm")
df_publicUseFilesMHScreen22 <- read.csv("https://www.health.state.mn.us/data/hcquality/pufs/docs/amh22countygp.csv") |>
dplyr::select(
FIPS_CODE
, TOTAL_OPTIMAL
, TOTAL_PATIENTS
, OPTIMAL_CARE_RATE
) |>
dplyr::mutate(year = 2022, measure = "aesm")
f_puf <- df_publicUseFilesMHScreen18 |> dplyr::bind_rows( df_publicUseFilesMHScreen19) |>
dplyr::bind_rows( df_publicUseFilesMHScreen20) |>  dplyr::bind_rows( df_publicUseFilesMHScreen21) |> dplyr::bind_rows( df_publicUseFilesMHScreen22) |>
dplyr::bind_rows( df_publicUseFilesDiabetes18) |> dplyr::bind_rows( df_publicUseFilesDiabetes19) |> dplyr::bind_rows( df_publicUseFilesDiabetes20) |>
dplyr::bind_rows( df_publicUseFilesDiabetes21) |> dplyr::bind_rows( df_publicUseFilesDiabetes22)
View(f_puf)
write.csv(f_puf, "f_puf.csv", row.names = FALSE)
if (file.exists("pages/Data/f_puf.csv")) {
f_puf <- read.csv("pages/Data/f_puf.csv")
} else {
f_puf <- read.csv("./Data/f_puf.csv")
}
View(f_puf)
f_puf <- f_puf |>
dplyr::filter(
FIPS_CODE %in%
c(
27119  #Mahnomen
, 27107  #Norman
, 27087   #Polk
, 27
)
)
View(f_puf)
f_puf <- f_puf |>
dplyr::mutate(
location = dplyr::case_when(
FIPS_CODE == 27119  ~ "Mahnomen"
, FIPS_CODE == 27107  ~ "Norman"
, FIPS_CODE == 27087  ~ "Polk"
, TRUE ~ "Minnesota"
)
)
View(f_puf)
write.csv(f_puf, "f_puf.csv", row.names = FALSE)
if (file.exists("pages/Data/f_puf.csv")) {
f_puf <- read.csv("pages/Data/f_puf.csv")
} else {
f_puf <- read.csv("./Data/f_puf.csv")
}
if (file.exists("pages/Data/f_puf.csv")) {
f_puf <- read.csv("pages/Data/f_puf.csv")
} else {
f_puf <- read.csv("./Data/f_puf.csv")
}
#| label: gb
#| include: false
# include does not show output or code #| is a special syntax for Quarto
#When testing and not rendering the report, the if statement returns true but when rendering as the report, the else executes
if (file.exists("pages/Global/gb.R")) {
source("pages/Global/gb.R")
source("pages/Data/data.R")
svi <- read.csv("pages/Data/CDC_svi.csv")
f_pHDAPDental <- read.csv("pages/Data/f_pHDAPDental.csv")
} else {
source("./Global/gb.R")
source("./Data/data.R")
svi <- read.csv("./Data/CDC_svi.csv")
f_pHDAPDental <- read.csv("./Data/f_pHDAPDental.csv")
}
View(f_puf)
if (file.exists("pages/Data/f_puf.csv")) {
f_puf <- read.csv("pages/Data/f_puf.csv")
} else {
f_puf <- read.csv("./Data/f_puf.csv")
}
if (file.exists("pages/Data/f_cdcWonderDeathCrude.csv")) {
f_cdcWonderDeathCrude <- read.csv("pages/Data/f_cdcWonderDeathCrude.csv")
} else {
f_cdcWonderDeathCrude <- read.csv("./Data/f_cdcWonderDeathCrude.csv")
}
#| label: gb
#| include: false
# include does not show output or code #| is a special syntax for Quarto
#When testing and not rendering the report, the if statement returns true but when rendering as the report, the else executes
if (file.exists("pages/Global/gb.R")) {
source("pages/Global/gb.R")
source("pages/Data/data.R")
svi <- read.csv("pages/Data/CDC_svi.csv")
f_pHDAPDental <- read.csv("pages/Data/f_pHDAPDental.csv")
} else {
source("./Global/gb.R")
source("./Data/data.R")
svi <- read.csv("./Data/CDC_svi.csv")
f_pHDAPDental <- read.csv("./Data/f_pHDAPDental.csv")
}
#| label: fig-healthGeneral
#| warning: false
#| include: false
# Filter the data by 'measureid'
filtered_data <- f_places2022 |>
dplyr::filter(measureid == "GHLTH")
# Create the plot
gbFun_CDCPlacesPlot(filtered_data, gbVal_colorScheme, gbVal_shapeScheme)
#| label: fig-healthPhysical
#| warning: false
#| include: false
# Filter the data by 'measureid'
filtered_data <- f_places2022 |>
dplyr::filter(measureid == "PHLTH")
# Create the plot
gbFun_CDCPlacesPlot(filtered_data, gbVal_colorScheme, gbVal_shapeScheme)
#| ref.label: fig-healthPhysical
#| fig-width: 8
#| fig-height: 6
#| fig-align: center
#| label: fig-disabilityMental
#| warning: false
#| include: false
# Filter the data by 'measureid'
filtered_data <- f_places2022 |>
dplyr::filter(measureid == "MHLTH")
# Create the plot
gbFun_CDCPlacesPlot(filtered_data, gbVal_colorScheme, gbVal_shapeScheme)
# CDC Places --------------------------------------------------------------
if (file.exists("pages/Data/f_places2022.csv")) {
f_places2022 <- read.csv("pages/Data/f_places2022.csv")
} else {
f_places2022 <- read.csv("./Data/f_places2022.csv")
}
# Public Health Data Access Portal Immunization -----------------------------------------
if (file.exists("pages/Data/f_pHDAPImmunization.csv")) {
f_pHDAPImmunization <- read.csv("pages/Data/f_pHDAPImmunization.csv")
} else {
f_pHDAPImmunization<- read.csv("./Data/f_pHDAPImmunization.csv")
}
# Public Health Data Access Portal Immunization -----------------------------------------
if (file.exists("pages/Data/f_pHDAPImmunization.csv")) {
f_pHDAPImmunization <- read.csv("pages/Data/f_pHDAPImmunization.csv")
} else {
f_pHDAPImmunization<- read.csv("./Data/f_pHDAPImmunization.csv")
}
if (file.exists("pages/Data/f_CHRR2024.csv")) {
f_CHRR2024 <- read.csv("pages/Data/f_CHRR2024.csv") |>
dplyr::mutate(
#The raw value is stored as character with commas, I have to first remove commas and then convert to number
rawvalue = as.integer(gsub(",", "", rawvalue))
, cihigh = formattable::comma(as.numeric(gsub(",", "", cihigh)),0)
, cilow = formattable::comma(as.numeric(gsub(",", "", cilow)),0)
)
} else {
f_CHRR2024 <- read.csv("./Data/f_CHRR2024.csv") |>
dplyr::mutate(
#The raw value is stored as character with commas, I have to first remove commas and then convert to number
rawvalue = as.integer(gsub(",", "", rawvalue))
, cihigh = formattable::comma(as.numeric(gsub(",", "", cihigh)),1)
, cilow = formattable::comma(as.numeric(gsub(",", "", cilow)),1)
)
}
if (file.exists("pages/Data/f_foodShelf.csv")) {
f_foodShelf <- read.csv("pages/Data/f_foodShelf.csv")
} else {
f_foodShelf <- read.csv("./Data/f_foodShelf.csv")
}
if (file.exists("pages/Data/mdeThirdGradeEducationStatus.csv")) {
f_mdeThirdGradeProficient <- read.csv("pages/Data/mdeThirdGradeEducationStatus.csv")
# dplyr::mutate(
#   #The raw value is stored as character with commas, I have to first remove commas and then convert to number
#   rawvalue = formattable::comma(as.numeric(gsub(",", "", rawvalue)),1)
#   , cihigh = formattable::comma(as.numeric(gsub(",", "", cihigh)),1)
#   , cilow = formattable::comma(as.numeric(gsub(",", "", cilow)),1)
# )
} else {
f_mdeThirdGradeProficient <- read.csv("./Data/mdeThirdGradeEducationStatus.csv")
# dplyr::mutate(
#   #The raw value is stored as character with commas, I have to first remove commas and then convert to number
#   rawvalue = formattable::comma(as.numeric(gsub(",", "", rawvalue)),1)
#   , cihigh = formattable::comma(as.numeric(gsub(",", "", cihigh)),1)
#   , cilow = formattable::comma(as.numeric(gsub(",", "", cilow)),1)
# )
}
# Unemployment Rate ---------------------------------------------------------
if (file.exists("pages/Data/f_unemploymentRateDEED.csv")) {
f_unemploymentRateDEED <- read.csv("pages/Data/f_unemploymentRateDEED.csv")
# dplyr::mutate(
#   #The raw value is stored as character with commas, I have to first remove commas and then convert to number
#   rawvalue = formattable::comma(as.numeric(gsub(",", "", rawvalue)),1)
#   , cihigh = formattable::comma(as.numeric(gsub(",", "", cihigh)),1)
#   , cilow = formattable::comma(as.numeric(gsub(",", "", cilow)),1)
# )
} else {
f_unemploymentRateDEED <- read.csv("./Data/f_unemploymentRateDEED.csv")
# dplyr::mutate(
#   #The raw value is stored as character with commas, I have to first remove commas and then convert to number
#   rawvalue = formattable::comma(as.numeric(gsub(",", "", rawvalue)),1)
#   , cihigh = formattable::comma(as.numeric(gsub(",", "", cihigh)),1)
#   , cilow = formattable::comma(as.numeric(gsub(",", "", cilow)),1)
# )
}
# Child and Teen Checkup ---------------------------------------------------------
if (file.exists("pages/Data/f_PNMChildTeenCheckup.csv")) {
f_cTcPnm <- read.csv("pages/Data/f_PNMChildTeenCheckup.csv")
} else {
f_cTcPnm <- read.csv("./Data/f_PNMChildTeenCheckup.csv")
}
if (file.exists("pages/Data/f_kidsCountMotherSmoke.csv")) {
f_kidsCountMotherSmoke <- read.csv("pages/Data/f_kidsCountMotherSmoke.csv")
} else {
f_kidsCountMotherSmoke <- read.csv("./Data/f_kidsCountMotherSmoke.csv")
}
if (file.exists("pages/Data/f_kidsCountMotherPnc.csv")) {
f_kidsCountMotherPnc <- read.csv("pages/Data/f_kidsCountMotherPnc.csv")
} else {
f_kidsCountMothersMoke <- read.csv("./Data/f_kidsCountMotherPnc.csv")
}
if (file.exists("pages/Data/f_kidsCountMotherSmoke.csv")) {
f_kidsCountMotherSmoke <- read.csv("pages/Data/f_kidsCountMotherSmoke.csv")
} else {
f_kidsCountMotherSmoke <- read.csv("./Data/f_kidsCountMotherSmoke.csv")
}
if (file.exists("pages/Data/f_neonatalAbstinenceSyndrome2016_2022.csv")) {
f_neonatalAbstinenceSyndrome2016_2022 <- read.csv("pages/Data/f_neonatalAbstinenceSyndrome2016_2022.csv")
} else {
f_neonatalAbstinenceSyndrome2016_2022 <- read.csv("./Data/f_neonatalAbstinenceSyndrome2016_2022.csv")
}
if (file.exists("pages/Data/f_mdhNonFatalDrugOverdose.csv")) {
f_mdhNonFatalDrugOverdose <- read.csv("pages/Data/f_mdhNonFatalDrugOverdose.csv")
} else {
f_mdhNonFatalDrugOverdose <- read.csv("./Data/f_mdhNonFatalDrugOverdose.csv")
}
if (file.exists("pages/Data/f_mss.csv")) {
f_mss <- read.csv("pages/Data/f_mss.csv")
} else {
f_mss <- read.csv("./Data/f_mss.csv")
}
if (file.exists("pages/Data/f_stiHIV.csv")) {
f_stiHIV <- read.csv("pages/Data/f_stiHIV.csv")
} else {
f_stiHIV <- read.csv("./Data/f_stiHIV.csv")
}
if (file.exists("pages/Data/f_boardOfPharmacyPmp.csv")) {
f_boardOfPharmacyPmp <- read.csv("pages/Data/f_boardOfPharmacyPmp.csv")
} else {
f_boardOfPharmacyPmp <- read.csv("./Data/f_boardOfPharmacyPmp.csv")
}
if (file.exists("pages/Data/f_puf.csv")) {
f_puf <- read.csv("pages/Data/f_puf.csv")
} else {
f_puf <- read.csv("./Data/f_puf.csv")
}
if (file.exists("pages/Data/f_cdcWonderDeathCrude.csv")) {
f_cdcWonderDeathCrude <- read.csv("pages/Data/f_cdcWonderDeathCrude.csv")
} else {
f_cdcWonderDeathCrude <- read.csv("./Data/f_cdcWonderDeathCrude.csv")
}
#| label: gb
#| include: false
# include does not show output or code #| is a special syntax for Quarto
#When testing and not rendering the report, the if statement returns true but when rendering as the report, the else executes
if (file.exists("pages/Global/gb.R")) {
source("pages/Global/gb.R")
source("pages/Data/data.R")
svi <- read.csv("pages/Data/CDC_svi.csv")
} else {
source("./Global/gb.R")
source("./Data/data.R")
svi <- read.csv("./Data/CDC_svi.csv")
}
if (file.exists("pages/Data/f_fatalDrugOverdose.csv")) {
f_fatalDrugOverdose <- read.csv("pages/Data/f_fatalDrugOverdose.csv")
} else {
f_fatalDrugOverdose <- read.csv("./Data/f_fatalDrugOverdose.csv")
}
#| label: gb
#| include: false
# include does not show output or code #| is a special syntax for Quarto
#When testing and not rendering the report, the if statement returns true but when rendering as the report, the else executes
if (file.exists("pages/Global/gb.R")) {
source("pages/Global/gb.R")
source("pages/Data/data.R")
svi <- read.csv("pages/Data/CDC_svi.csv")
} else {
source("./Global/gb.R")
source("./Data/data.R")
svi <- read.csv("./Data/CDC_svi.csv")
}
#| label: gb
#| include: false
# include does not show output or code #| is a special syntax for Quarto
#When testing and not rendering the report, the if statement returns true but when rendering as the report, the else executes
if (file.exists("pages/Global/gb.R")) {
source("pages/Global/gb.R")
source("pages/Data/data.R")
svi <- read.csv("pages/Data/CDC_svi.csv")
f_pHDAPDental <- read.csv("pages/Data/f_pHDAPDental.csv")
} else {
source("./Global/gb.R")
source("./Data/data.R")
svi <- read.csv("./Data/CDC_svi.csv")
f_pHDAPDental <- read.csv("./Data/f_pHDAPDental.csv")
}
source("pages/Global/gb.R")
source("pages/Data/data.R")
#Use functions in data so have to pull them in here
if (file.exists("pages/Global/gb.R")) {
source("pages/Global/gb.R")
} else {
source("./Global/gb.R")
}
# CDC Places --------------------------------------------------------------
if (file.exists("pages/Data/f_places2022.csv")) {
f_places2022 <- read.csv("pages/Data/f_places2022.csv")
} else {
f_places2022 <- read.csv("./Data/f_places2022.csv")
}
# Public Health Data Access Portal Immunization -----------------------------------------
if (file.exists("pages/Data/f_pHDAPImmunization.csv")) {
f_pHDAPImmunization <- read.csv("pages/Data/f_pHDAPImmunization.csv")
} else {
f_pHDAPImmunization<- read.csv("./Data/f_pHDAPImmunization.csv")
}
if (file.exists("pages/Data/f_CHRR2024.csv")) {
f_CHRR2024 <- read.csv("pages/Data/f_CHRR2024.csv") |>
dplyr::mutate(
#The raw value is stored as character with commas, I have to first remove commas and then convert to number
rawvalue = as.integer(gsub(",", "", rawvalue))
, cihigh = formattable::comma(as.numeric(gsub(",", "", cihigh)),0)
, cilow = formattable::comma(as.numeric(gsub(",", "", cilow)),0)
)
} else {
f_CHRR2024 <- read.csv("./Data/f_CHRR2024.csv") |>
dplyr::mutate(
#The raw value is stored as character with commas, I have to first remove commas and then convert to number
rawvalue = as.integer(gsub(",", "", rawvalue))
, cihigh = formattable::comma(as.numeric(gsub(",", "", cihigh)),1)
, cilow = formattable::comma(as.numeric(gsub(",", "", cilow)),1)
)
}
if (file.exists("pages/Data/f_foodShelf.csv")) {
f_foodShelf <- read.csv("pages/Data/f_foodShelf.csv")
} else {
f_foodShelf <- read.csv("./Data/f_foodShelf.csv")
}
if (file.exists("pages/Data/mdeThirdGradeEducationStatus.csv")) {
f_mdeThirdGradeProficient <- read.csv("pages/Data/mdeThirdGradeEducationStatus.csv")
# dplyr::mutate(
#   #The raw value is stored as character with commas, I have to first remove commas and then convert to number
#   rawvalue = formattable::comma(as.numeric(gsub(",", "", rawvalue)),1)
#   , cihigh = formattable::comma(as.numeric(gsub(",", "", cihigh)),1)
#   , cilow = formattable::comma(as.numeric(gsub(",", "", cilow)),1)
# )
} else {
f_mdeThirdGradeProficient <- read.csv("./Data/mdeThirdGradeEducationStatus.csv")
# dplyr::mutate(
#   #The raw value is stored as character with commas, I have to first remove commas and then convert to number
#   rawvalue = formattable::comma(as.numeric(gsub(",", "", rawvalue)),1)
#   , cihigh = formattable::comma(as.numeric(gsub(",", "", cihigh)),1)
#   , cilow = formattable::comma(as.numeric(gsub(",", "", cilow)),1)
# )
}
# Unemployment Rate ---------------------------------------------------------
if (file.exists("pages/Data/f_unemploymentRateDEED.csv")) {
f_unemploymentRateDEED <- read.csv("pages/Data/f_unemploymentRateDEED.csv")
# dplyr::mutate(
#   #The raw value is stored as character with commas, I have to first remove commas and then convert to number
#   rawvalue = formattable::comma(as.numeric(gsub(",", "", rawvalue)),1)
#   , cihigh = formattable::comma(as.numeric(gsub(",", "", cihigh)),1)
#   , cilow = formattable::comma(as.numeric(gsub(",", "", cilow)),1)
# )
} else {
f_unemploymentRateDEED <- read.csv("./Data/f_unemploymentRateDEED.csv")
# dplyr::mutate(
#   #The raw value is stored as character with commas, I have to first remove commas and then convert to number
#   rawvalue = formattable::comma(as.numeric(gsub(",", "", rawvalue)),1)
#   , cihigh = formattable::comma(as.numeric(gsub(",", "", cihigh)),1)
#   , cilow = formattable::comma(as.numeric(gsub(",", "", cilow)),1)
# )
}
# Child and Teen Checkup ---------------------------------------------------------
if (file.exists("pages/Data/f_PNMChildTeenCheckup.csv")) {
f_cTcPnm <- read.csv("pages/Data/f_PNMChildTeenCheckup.csv")
} else {
f_cTcPnm <- read.csv("./Data/f_PNMChildTeenCheckup.csv")
}
if (file.exists("pages/Data/f_kidsCountMotherSmoke.csv")) {
f_kidsCountMotherSmoke <- read.csv("pages/Data/f_kidsCountMotherSmoke.csv")
} else {
f_kidsCountMotherSmoke <- read.csv("./Data/f_kidsCountMotherSmoke.csv")
}
if (file.exists("pages/Data/f_kidsCountMotherPnc.csv")) {
f_kidsCountMotherPnc <- read.csv("pages/Data/f_kidsCountMotherPnc.csv")
} else {
f_kidsCountMothersMoke <- read.csv("./Data/f_kidsCountMotherPnc.csv")
}
if (file.exists("pages/Data/f_kidsCountMotherSmoke.csv")) {
f_kidsCountMotherSmoke <- read.csv("pages/Data/f_kidsCountMotherSmoke.csv")
} else {
f_kidsCountMotherSmoke <- read.csv("./Data/f_kidsCountMotherSmoke.csv")
}
if (file.exists("pages/Data/f_neonatalAbstinenceSyndrome2016_2022.csv")) {
f_neonatalAbstinenceSyndrome2016_2022 <- read.csv("pages/Data/f_neonatalAbstinenceSyndrome2016_2022.csv")
} else {
f_neonatalAbstinenceSyndrome2016_2022 <- read.csv("./Data/f_neonatalAbstinenceSyndrome2016_2022.csv")
}
if (file.exists("pages/Data/f_mdhNonFatalDrugOverdose.csv")) {
f_mdhNonFatalDrugOverdose <- read.csv("pages/Data/f_mdhNonFatalDrugOverdose.csv")
} else {
f_mdhNonFatalDrugOverdose <- read.csv("./Data/f_mdhNonFatalDrugOverdose.csv")
}
if (file.exists("pages/Data/f_mss.csv")) {
f_mss <- read.csv("pages/Data/f_mss.csv")
} else {
f_mss <- read.csv("./Data/f_mss.csv")
}
if (file.exists("pages/Data/f_stiHIV.csv")) {
f_stiHIV <- read.csv("pages/Data/f_stiHIV.csv")
} else {
f_stiHIV <- read.csv("./Data/f_stiHIV.csv")
}
if (file.exists("pages/Data/f_boardOfPharmacyPmp.csv")) {
f_boardOfPharmacyPmp <- read.csv("pages/Data/f_boardOfPharmacyPmp.csv")
} else {
f_boardOfPharmacyPmp <- read.csv("./Data/f_boardOfPharmacyPmp.csv")
}
if (file.exists("pages/Data/f_puf.csv")) {
f_puf <- read.csv("pages/Data/f_puf.csv")
} else {
f_puf <- read.csv("./Data/f_puf.csv")
}
if (file.exists("pages/Data/f_cdcWonderDeathCrude.csv")) {
f_cdcWonderDeathCrude <- read.csv("pages/Data/f_cdcWonderDeathCrude.csv")
} else {
f_cdcWonderDeathCrude <- read.csv("./Data/f_cdcWonderDeathCrude.csv")
}
library(gitcreds)
gitcreds_set()
usethis::use_github("https://github.com/quinchs-mn/Polk_Norman_Mahnomen_CHA.git")
usethis::use_git_remote("origin", url = NULL, overwrite = TRUE)`
usethis::use_git_remote("origin", url = NULL, overwrite = TRUE)
usethis::use_github("https://github.com/quinchs-mn/Polk_Norman_Mahnomen_CHA.git")
usethis::use_github("https://github.com/quinchs-mn/Polk_Norman_Mahnomen_CHA.git")
usethis::use_git_remote("origin",url = NULL, overwrite = TRUE)
usethis::use_github("https://github.com/quinchs-mn/Polk_Norman_Mahnomen_CHA.git")
usethis::use_github(https://github.com/quinchs-mn/Polk_Norman_Mahnomen_CHA.git)
usethis::use_github(https://github.com/quinchs-mn/Polk_Norman_Mahnomen_CHA.git")
usethis::use_github("https://github.com/quinchs-mn/Polk_Norman_Mahnomen_CHA.git")
usethis::use_github("gh repo clone quinchs-mn/Polk_Norman_Mahnomen_CHA")
usethis::use_github("https://github.com/quinchs-mn/Polk_Norman_Mahnomen_CHA")
git reset HEAD
git reset HEAD~
usethis::use_github("https://github.com/quinchs-mn/Polk_Norman_Mahnomen_CHA")
git remote add origin https://github.com/yourusername/your-repo.git
git remote add origin https://github.com/quinchs-mn/Polk_Norman_Mahnomen_CHA.git
git remote add origin https://github.com/yourusername/your-repo.git
git remote -v
usethis::use_github("https://github.com/quinchs-mn/Polk_Norman_Mahnomen_CHA.git")
gh repo create quinchs-mn/Polk_Norman_Mahnomen_CHA --public
